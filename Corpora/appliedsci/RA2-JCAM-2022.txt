<heading>
Title: Atomic Embeddability, Clustered Planarity,
and Thickenability
Author: Radoslav Fulek and Csaba D. Tóth
Journal: Journal of the Association for Computing Machinery
Year: 2022
</heading>

Abstract
We study the atomic embeddability testing problem, which is a common generalization of clustered planarity (c-planarity, for short) and thickenability testing, and present a polynomial-time algorithm for this
problem, thereby giving the first polynomial-time algorithm for c-planarity. C-planarity was introduced in 1995 by Feng, Cohen, and Eades as a variant of graph planarity, in which the vertex set of the input graph is endowed with a hierarchical clustering and we seek an embedding (crossing free drawing) of the graph in the plane that respects the clustering in a certain natural sense. Until now, it has been an open problem whether c-planarity can be tested efficiently. The thickenability problem for simplicial complexes emerged in the topology of manifolds in the 1960s. A 2-dimensional simplicial complex is thickenable if it embeds in some orientable 3-dimensional manifold. Recently, Carmesin announced that thickenability can be tested in polynomial time. Our algorithm for atomic embeddability combines ideas from Carmesin’s work with algorithmic tools previously developed for weak embeddability testing. We express our results purely in terms of graphs on surfaces, and rely on the machinery of topological graph theory. Finally, we give a polynomial-time reduction from atomic embeddability to thickenability thereby showing that both problems are polynomially equivalent, and show that a slight generalization of atomic embeddability to the setting in which clusters are toroidal graphs is NP-complete.


INTRODUCTION
Clustered planarity. (for short, c-planarity) was introduced in 1995 by Feng, Cohen, and
Eades [24, 25], motivated by applications in set visualization. Lengauer [36] considered one of its

R. Fulek and C. D. Tóth

Fig. 1. A positive (left) and negative (right) instance of C-planarity. Both instances have the same underlying
abstract graph G and the collection of curves C, and differ only in the map μ, which is encoded in the figure
by colors, mapping the vertices of G to regions in R.

variants already in the 1980s. The problem can be seen as a hierarchical variant of planarity testing;
a problem for which a linear-time algorithm has been known for a long time [35]. In the extensive
literature devoted to c-planarity and its variants, the complexity status of only restricted special
cases has been established, most notably in [2, 5, 19, 30], see also the somewhat outdated survey [18]. The c-planarity problem is formally stated as follows, see Figure 1 for an illustration.
Problem 1 (C-Planarity). We are given a simple graph G = (V , E); a collection C of pairwise
disjoint simple closed curves in R2 ; and a map μ : V → R, where R is the set of path-connected

components (called regions) of R2 \ C ∈ C C. Decide whether there exists an embedding ψ of G in R2
such that ψ (v) ∈ μ (v) and |ψ (e) ∩ C | ≤ 1 for every C ∈ C and every edge e ∈ E.
Embeddability in R3 and thickenability. Note that a graph is a 1-dimensional simplicial complex. We consider the 2-dimensional analog of graph embeddings in R3 . It is a well-known result
that for every graph G there exists an orientable surface (an orientable 2-dimensional manifold)
S such that G embeds in S. An analogous result fails for 2-dimensional polyhedra (2-polyhedra,
for short) and 3-dimensional manifolds (3-manifolds, for short). A 2-polyhedron P is thickenable
if P embeds1 in some orientable 3-manifold. It was known at least since the 1960s that testing
whether a 2-polyhedron is thickenable is in NP, which is an immediate consequence of a theorem
by Neuwirth [44]; see also [51]. We restate it as Theorem 3 in Section 4 (in essence, it characterizes
thickenability in terms of so-called link graphs). We remark that Neuwirth’s theorem has been
recently used in [38] in the first step of an algorithm that decides (not necessarily in polynomial
time) whether a given 2-polyhedron embeds into R3 .
The thickenability problem is formulated as follows. Let H be a finite multigraph without loops
(multiple edges are allowed). Let P = (H , F ) denote a 2-dimensional (abstract) polyhedron, where
F is a set of cycles in H . We assume that every edge of H is contained in at least one element of
F . The multigraph H is the 1-skeleton of P and every element of F is a facet in P. Note that H
might contain a cycle that is not a facet of P.
Problem 2 (Thickenability). Given a 2-polyhedron P = (H , F ), where H is a multigraph without
loops and F is the set of facets of P, decide whether P embeds to some orientable 3-manifold.
Recently, Carmesin [15, 16, Section 6] announced that one can test whether a simply connected
2-polyhedron embeds in R3 in quadratic time,2 while embeddability testing for general 2-polyhedra
in R3 is known to be NP-hard [21]. In the case of simply connected 2-polyhedra, thickenability is
1 In

this case, topological and piecewise linear embeddability are equivalent.
correctness of the claimed running time has not been confirmed, yet.

2 The

Atomic Embeddability, Clustered Planarity, and Thickenability

13:3

Fig. 2. Part of an atomic embedding of G on S(ν ), where the atom ν is incident to pipes ρ and π (left), and
the corresponding local graph G φ (ν ) (right). The virtual vertices u and w in G φ (ν ) correspond to the pipes ρ
and π , respectively. All other vertices in G φ (ν ) are ordinary.

equivalent to embeddability in R3 , see for example [14]. Though this equivalence appears to be a
well-known consequence of Perelman’s famous result [45–47], see also the monograph [43].
In fact, Carmesin’s approach deals exclusively with testing the equivalent condition for thickenability in Theorem 3 (cf. Section 4). Therefore his approach to the embeddability in R3 applies
also to thickenability in general, but it is restricted to simply connected 2-polyhedra. In contrast,
testing whether a given 2-polyhedron that is homeomorphic to a nonorientable surface, embeds
in a given 3-manifold (that is, both the 2-polyhedron and the 3-manifold are given), is already
NP-hard [13].
Atomic embeddibility. was introduced in [2] and [27, Section 11], see also [28], as a common
generalization of C-planarity and thickenability. It is an extension of the concept of weak
embeddability [2] (also known in topology as approximating simplicial maps by embeddings [42,
48, 50, 52]). We do not define weak embedding here, but remark that its study in computational
geometry was motivated by the special case of (piecewise linear) weak embeddings of a cycle in
the plane, which corresponds to weakly simple polygons [1, 17, 20].
Let G and H be finite multigraphs without loops. To distinguish between G and H in our terminology, the vertices and edges of H are called atoms and pipes, respectively. A map φ : G → H
is simplicial if it maps vertices to vertices (i.e., to atoms), edges to vertices or edges (i.e., to atoms
or pipes), and preserves edge-vertex incidences. An instance of atomic embeddability is given by
a simplicial map φ : G → H .
The thickening H of H is an orientable 2-dimensional surface constructed as follows. For each
atom ν ∈ V (H ), let S(ν ) be a 2-sphere with deg(ν ) pairwise disjoint open discs, called holes,
removed. We fix an orientation on S(ν ), and define an arbitrary one-to-one correspondence between the holes of S(ν ) and the pipes incident to ν . The thickening H is obtained by gluing the
surfaces S(ν ), ν ∈ V (H ), as follows; see Figure 2 (left) for an illustration. For every pipe ρ ∈ E (H ),
ρ = ν μ, identify the pair of boundaries of the holes corresponding to ρ by an orientation reversing
homeomorphism. In particular, if ν μ  E (H ), then S(ν ) and S(μ) are disjoint.3
An embedding E : G → H is an atomic embedding of G with respect to φ if every vertex
v ∈ V (G) is embedded in S(φ(v)); and every edge uv ∈ E(G) is embedded as a Jordan arc in
S(φ(u)) ∪ S(φ(v)) as follows: If φ(u)  φ(v) then the Jordan arc representing uv intersects the
3 The

surface H is reminiscent of the ball-and-stick or space-filling models in molecular chemistry.

13:4

hole corresponding to the pipe φ(uv) in exactly one point, which is a proper crossing, or in other
words, a transversal intersection.
Problem 3 (Atomic Embeddability). Given a pair of multigraphs without loops, G and H , and
a simplicial map φ : G → H , decide whether an atomic embedding of G with respect to φ exists.
We remark that an instance (H , F ) of thickenability corresponds to an instance (G, H ) of
atomic embeddability, where H is the same graph in both instances, and G is a vertex-disjoint
union of cycles (disjoint copies of the cycles in F ).
Results. In this paper, we present a polynomial-time algorithm for atomic embeddability,
thereby giving the first polynomial-time algorithm for c-planarity. Our approach combines ideas
from Carmesin’s work [15] with algorithmic tools previously developed for weak embeddability
testing. In particular, the elementary operation “stretch” (defined below) is based on a similar operation in [15]. However, by formulating the problem in terms of graphs on surfaces, our results
are more general and perhaps more accessible to the broader community. A polynomial-time algorithm for c-planarity implies that some other constrained planarity problems that have previously
been reduced to c-planarity are tractable, as well; see [3] and [4, Figure 4].
We also consider a further generalization of atomic embeddability in which the surfaces S(ν ),
ν ∈ V (H ), may have higher genus (by attaching additional handles), and show that this problem
is NP-complete even if each surface S(ν ) is based on a torus rather than a sphere.
In the last section, we give a short polynomial-time reduction of atomic embeddability to
thickenability, which shows that these two problems are polynomially equivalent.
Synchronized planarity. Very recently, Bläsius et al. [7] gave an O (n2 )-time algorithm for atomic
embeddability and its generalizations, improving upon the running time of O (n8 ) in the proof of
Theorem 1 below.
Simultaneous embeddability of two graphs. Angelini and Da Lozzo [4] proved that there exists
a polynomial time reduction to c-planarity from connected sefe-2, the problem of deciding
simultaneous embeddability of two graphs in the case when the intersection of the two graphs is
connected (see Section 4 for a formal statement of the problem). Therefore, our algorithm gives a
polynomial time algorithm for this problem. The general version of the problem, known as sefe-2,
where the intersection of the two graphs may be disconnected, is notoriously difficult. Introduced
by Brass et al. [11], it subsumes most of the studied planarity variants [49, Figure 2], and has generated considerable research activity [3, 8, 10, 31]; see also [9] for a survey. Schaefer [49, Theorem
6.17] realized that c-planarity is reducible in polynomial time to the problem sefe-2. Therefore, it
is an unfortunate state of affairs that its complexity status is still unknown. Although, Carmesin’s
and our results give a new hope that a resolution of sefe-2 problem might be within reach.
Let us note that there also exists a natural and fairly straightforward polynomial-time reduction
of connected sefe-2 to thickenability, which was found independently by de Mesmay, Kaluža,
and Tancer [12, 40] and these authors. This suggests that thickenability, and hence, atomic
embeddability, is not powerful enough to solve sefe-2 in general without additional novel ideas.
Organization. Section 2 presents a polynomial-time algorithm for atomic embeddability. Section 3 shows that a further generalization of the problem is NP-hard. In Section 4, we give a direct
polynomial-time reduction of atomic embeddability to thickenability, which also establishes
a polynomial reduction of another problem, connected sefe-2, to thickenability.

Atomic Embeddability, Clustered Planarity, and Thickenability
2

13:5

In this section we present a polynomial-time algorithm for atomic embeddability. After defining local graphs, which are crucial for the algorithm, we present a high-level overview in
Section 2.1. Section 2.2 introduces additional terminology. We reduce a given instance φ to normal
form (defined below) in Section 2.3; and introduce five elementary operations on atomic instances in
Section 2.4 that are used in our main algorithm. We show how to solve two special cases in linear
time in Sections 2.5 and 2.6. Our main algorithm in Section 2.7 reduces all normal instances to
these special cases. We finish with a running time analysis in Section 2.8.
Local graphs. Let φ : G → H be an instance of atomic embeddability. The simplicial map φ :
G → H naturally extends to subgraphs of G. For an atom ν ∈ V (H ), φ −1 [ν ] denotes the subgraph
of G mapped to ν by φ. For a pipe ρ ∈ E (H ), φ −1 [ρ] denotes the subset of edges of G mapped to ρ
by φ.
For every atom ν ∈ V (H ), we define a multigraph G φ (ν ), which captures the local structure of φ
at the atom ν and its incident pipes; see Figure 2 for an illustration. (We remark that graphs G φ (ν )
are analogous to the graphs C in [2] and the links in [14].)
The vertices of G φ (ν ) are in a one-to-one correspondence with the union of the set of vertices in
V (G) mapped by φ to ν (that is, V (φ −1 [ν ])) and the set of pipes incident to ν . Hence, we can distinguish between ordinary vertices that correspond to vertices in V (φ −1 [ν ]) and virtual vertices
that correspond to pipes incident to ν . For every edge in E(G) between two vertices in V (φ −1 [ν ]) in
G, add an edge in G φ (ν ) between the corresponding vertices. Finally, for every edge in uv ∈ E (G)
where u ∈ V (φ −1 [ν ]) and v  V (φ −1 [ν ]), add an edge G φ (ν ) between the ordinary vertex u and the
virtual vertex corresponding to φ(uv). Thus, edges of G φ (ν ) are in a one-to-one correspondence
with the union of the edges of G between vertices in V (φ −1 [ν ]) and the edges of G mapped to pipes
incident to ν by φ. Let e ∈ E (G) denote the edge corresponding to an edge e ∈ E (G φ (ν )).
Note that the virtual vertices form an independent set in G φ (ν ). An embedding Eν of G φ (ν ) is
inherited from an atomic embedding E of G, if Eν is obtained from the restriction E to S(ν ) by
filling the holes of S(ν ) with discs, and then contracting them to points.
Let E : G → S be an embedding of a graph on an orientable surface. The rotation at a vertex
v ∈ V (G) is the counterclockwise cyclic order of the end pieces of the edges incident to v. The
rotation system of E is the set of rotations of all vertices of G. A vertex v of a planar graph has
a fixed rotation (for short, is fixed) if its rotation in every embedding of the graph in the plane
is unique up to the choice of orientation. For a pair of virtual vertices u and v of G φ (μ) and G φ (ν ),
resp., corresponding to a pipe μν = ρ ∈ E (H ), the edges e incident to u (resp., v) correspond
to edges e ∈ φ −1 [ρ]. The rotations of u and v in an embedding of all local graphs in the plane
determine two cyclic orders φ −1 [ρ]. This allows us, in particular, to define that the rotations at u
and v to be opposite (in other words, reverse) to each other, if the rotation at u is (uu 1 , . . . , uu deg(u ) ),
at v it is (vv deg(v ) , . . . , vv 1 ), and uui = vvi = ui vi ∈ E(G). The rotations of u and v are compatible
if they are the same or opposite to each other; and incompatible otherwise.
An instance φ of atomic embeddibility is positive if there exists an atomic embedding of G
with respect to φ. Two instances, φ and φ , are equivalent if φ and φ  are both positive, or φ and φ 
are both negative. We can now formulate atomic embeddibility in terms of the rotation systems
of plane embeddings of the graphs G φ (ν ), ν ∈ V (H ).
Observation 1. An instance φ : G → H of atomic embeddability is positive if and only if the
graphs G φ (ν ), ν ∈ V (H ), are planar, and they each have embeddings in the plane such that for every
pipe μν ∈ E (H ), the virtual vertices corresponding to μν in G φ (μ) and G φ (ν ) have opposite rotations
(in the sense that we consider every edge e incident to a virtual vertex as e).
13:6


Fig. 3. A proper 2-cut {u, v} and its three bridges (left), a p-path with poles u and v (middle), and a p-star
centered at v (right).

For a subset V  ⊂ V (G), a V -bridge B in G is a subgraph of G obtained as the union of V , a
connected component C of G \ V , and all the edges joining a vertex of C with a vertex of V . We
allow B to consist of a single edge between two vertices in V , or a loop incident to a vertex in V 
(see Figure 3 (left)). Analogously to Carmesin [14], we also define two special graphs (as possible
local graphs). A p-path is a graph that consists of two vertices (poles) connected by one or more
subdivided edges (Figure 3 (middle)). A p-star is a graph with a unique cut vertex (center) whose
bridges are p-paths with one pole at the center (Figure 3 (right)).
2.1 High Level Overview of the Recognition Algorithm
Given an instance φ of atomic embeddiblity, we apply a sequence of elementary operations that
each produces an equivalent instance φ  (with respect to atomic embeddability). Intermediate steps
of our algorithm may detect that the instance is negative when a local graph G φ (ν ) is nonplanar.
It may also disconnect the graph H , effectively splitting an instance into independent instances.
Ultimately, it reduces φ to a family of instances, each of which is either toroidal (where both G
and H are 2-regular), or subcubic (where the maximum degree of all local graphs is at most 3). In
both cases, we can easily test atomic embeddibility in linear time (Sections 2.5 and 2.6). Hence, the
witness of atomic non-embeddibility that is provided by our algorithm is either the non-planarity
of a local graph in an instance produced by a sequence of elementary operations, or negative
subcubic or toroidal instance.
Let G ∗ denote the disjoint union of all local graphs except those belonging to toroidal
subinstances. Our algorithm incrementally reduces the maximum degree Δ = Δ(φ) =
maxv ∈V ( G ∗ ) deg(v). The two key operations for dealing with a vertex v ∈ V (G ∗ ) of degree Δ ≥ 4
are Stretch(v, .), which splits v into two vertices of smaller degree (illustrated in Figure 8), and
Contract(.), which contracts a pipe (illustrated in Figure 12). Operation Stretch(.) can be applied
to a virtual or an ordinary vertex: If it is applied to an ordinary vertex, it modifies only G and not
H , but if it is applied to a virtual vertex, it modifies both G and H , and in particular it increases
the genus of the surface H by 1. We note that the increase in the genus of H occurs also in the
special case that φ represents an instance of c-planarity (when H is initially homeomorphic to
a 2-sphere, i.e., when its genus is 0). This explains in part why this approach for the inherently
planar problem of c-planarity has not been considered before. The generalization of c-planarity to
surfaces of higher genus allows for a broader range of operations, but it also poses several technical challenges that had to be resolved—some of them even indicated that the problem might be
NP-complete, which we discuss next.
Unfortunately, Stretch(v, .) produces an equivalent instance only if we already have some partial
information about the rotation of vertex v. In general, it cannot reduce the degree of a cut vertex.
This obstacle is overcome with the help of a surprisingly simple operation, Contract(ρ), which
contracts a pair of atoms in H joined by a single pipe ρ into one atom, thereby eliminating a pair
of virtual vertices in G ∗ corresponding to ρ. An almost identical operation is also crucial in our
Atomic Embeddability, Clustered Planarity, and Thickenability

13:7

recent joint work with Akitaya [2] about weak embeddability. Nevertheless, the possibility of using
this operation in the context of (the general case of) c-planarity or atomic embeddability was not
clear to us for some time. The reason is that the operation Contract(ρ) for a pipe ρ = μν can only
be applied in a very restricted setting, essentially if and only if G φ (μ) or G φ (ν ) is a p-path and ρ
corresponds to a pole of that p-path; or if they are both p-stars and ρ corresponds to their centers.
The crucial observation that saves the day, which is implicit in Carmesin’s work, is that after some
preprocessing that resolves 2-cuts with a vertex of degree Δ, we can use the operation Enclose(.),
illustrated in Figure 7, to turn each cut vertex of degree Δ into a center of a p-star.
In order to show that our algorithm runs in polynomial time, we define a nonnegative potential
Φ(φ) bounded from above throughout the execution of the algorithm by a polynomial function of
|V (G)| that strictly decreases after every application of Stretch(.) or Contract(.), but unfortunately,
not after every application of Enclose(.), which possibly just creates a pair of new virtual vertices
in G ∗ . Hence, we had to design a charging scheme that controls the growth of G ∗ .
Several other similar, but less crucial, operations are used in the preprocessing and postprocessing steps of the algorithm, where the preprocessing step normalizes the input instance in order to
allow a relatively smooth runtime analysis, and the postprocessing step handles toroidal instances
and subcubic instances (where Δ(φ) ≤ 3).
2.2

Preliminaries

Let G and H be multigraphs without loops (multiple edges are allowed in both H and G). By a slight
abuse of notation, if there is no danger of confusion, we sometimes denote edges by unordered pairs
of their endpoints (even though several edges may connect the same pair of vertices). A path, cycle,
and walk in a graph is always assumed to be a sequence of edges (rather than vertices). Recall that
in order to distinguish G and H in our terminology, the vertices and edges of H are called atoms
and pipes, respectively. We use the convention that vertices and edges of G are denoted by lower
case Roman letters (e.g., u, v, z and e, f , д), respectively, and the atoms and pipes by lower case
Greek letters (e.g., ν, μ and ρ, π ).
Cut vertices, 2-cuts, and 2-edge-cuts. Every vertex of degree 2 or less has a unique rotation, hence
it has a fixed rotation. For this reason, we use a topological notion of 1- and 2-cuts, which is
invariant to subdivisions of edges and suppression of vertices of degree 2. For a connected graph
G, which is not a cycle, denote by G − the multigraph obtained by suppressing all vertices of degree
2. Hence, G − is free of subdivided edges, defined as paths whose internal vertices have degree 2.
Note that G − can have loops corresponding to cycles in G that form leaf blocks.
Let G be a connected graph that is not a cycle. A vertex v ∈ V (G − ) ⊆ V (G) is a proper cut
vertex (or proper 1-cut) of G if there are two or more {v}-bridges in G − . A pair of vertices {u, v} ⊂
V (G − ) ⊆ V (G) is a proper 2-cut of G if there are at least three {u, v}-bridges in G − , or there are
exactly two {u, v}-bridges in G − , neither of which is an edge in G − . (Note that if there are exactly
two {u, v}-bridges in G − , and one of them is an edge between u and v, then {u, v} is not a 2-cut
in G − .) A pair of edges {e, f } ⊂ E (G), such that at least one vertex incident to e and one vertex
incident to f is of degree at least 3, is a proper 2-edge-cut of G if there exist edges e − and f − , such
that e − and f − were obtained by suppressing internal vertices of degree 2 of a path containing e
and f , respectively, and {e − , f − } is a 2-edge-cut in G − . Finally, for a proper 2-cut {u, v}, a {u, v}bridge B is separable if degB (u) ∈ {1, deg(u) − 1} and degB (v) ∈ {1, deg(v) − 1}, otherwise it is
nonseparable.
Observation 2. Let G be a connected graph that is not a cycle. If {u, v} is a proper 2-cut and B is
a separable {u, v}-bridge but not a subdivided edge, then there exists a proper 2-edge-cut {e, f } in G
such that u ∈ e and v ∈ f .
13:8

Fig. 4. An atomic embedding of G on S(μ) ∪ S(ν ) before and after operation Suppress(ρ), where ρ = μν. The
operation eliminates a pipe with at most two edges of G.

We often tacitly use the following well-known result by Mac Lane [37]. If G is a connected planar
graph, and the rotation of a vertex v is not fixed, then deg(v) ≥ 3 and v participates in a proper 1or 2-cut. In particular, if every graph G φ (ν ), ν ∈ V (H ), is a subdivision of a 3-connected graph, we
can use planarity testing to check the conditions in Observation 1, and easily reduce the atomic
embeddability problem to 2SAT (cf. Section 2.6). The challenge is, therefore, to handle the possible
rotations of vertices that participate in proper 1- or 2-cuts in some local graph G φ (ν ).
2.3 Preprocessing and Data Structures
Our algorithm uses a sequence of elementary operations that dynamically modify a given instance
φ : G → H of atomic embeddability. For the running time analysis (Section 2.8), we need to
maintain data structures that support these operations. We assume that the input specifies G, H ,
and φ explicitly (i.e., adjacency lists for the graphs G and H , and pointers from the vertices and
edges of G to their images in H under the map φ : G → H ). The size of an instance φ : G → H is the
total number of edges and vertices in the graphs G and H . Before we present our data structures
(which do not maintain H and φ explicitly), we preprocess the instance φ.
Definition 1. An instance φ : G → H of atomic embeddability is normal if
• the degree of every virtual vertex in every G φ (ν ), ν ∈ V (H ), is 3 or higher; and
• G φ (ν ) is connected for all ν ∈ V (H ).
We define an operation that eliminates pipes with two or less edges, see Figure 4.
Suppress(ρ). We are given a pipe ρ ∈ E(H ) such that |φ −1 [ρ]| ≤ 2. Let μ, ν ∈ V (H ) be the two
atoms incident to ρ. Remove the pipe ρ from E (H ). If φ −1 [ρ] contains one edge, say uv ∈ E (G)
with φ(u) = μ and φ(v) = ν , then delete uv from E (G), insert two new vertices u , v  and new
edges uu , vv  into G, and update φ with φ(u  ) = μ and φ(v  ) = ν . If φ −1 [ρ] contains two edges,
say ui vi ∈ E(G) with φ(ui ) = μ and φ(vi ) = ν , for i ∈ {1, 2}, then delete both u 1v 1 and u 2v 2 from
E (G), insert two new vertices u , v  and new edges u 1u , u 2u , v 1v , and v 2v  into G, and update φ
with φ(u  ) = μ and φ(v  ) = ν .
Since the virtual vertices that correspond to ρ in G φ (μ) and G φ (ν ) have fixed rotations, by
Observation 1, the following is straightforward.
Lemma 1. For every instance φ : G → H of atomic embeddability, and every pipe ρ ∈ E (H ),
whose corresponding vertices in local graphs have degree less than 3, operation Suppress(ρ) produces
an equivalent instance.
We define an operation that splits an atom ν if G φ (ν ) is disconnected, see Figure 5.
Split(ν ). We are given a local graph G φ (ν ) whose connected components are C 1 , . . . , Ck , for
some k ∈ N. Delete ν from H , introduce new vertices ν 1 , . . . , νk in V (H ), and introduce a pipe νi μ

Atomic Embeddability, Clustered Planarity, and Thickenability

13:9


Fig. 5. An atomic embedding of G on S(ν ) and i S(νi ) before and after, respectively, operation Split(ν).
The operation splits an atom ν ∈ V (H ), for which G φ (ν ) is disconnected, into as many atoms as the number
of connected components in G φ (ν ).

for every ρ = ν μ ∈ E (H ) such that ρ corresponds to a virtual vertex of Ci . Finally, redefine φ on
V (φ −1 [ν ]) as follows: Put φ(v) = νi if v ∈ V (Ci ).
By Observation 1, the following is straightforward.
Lemma 2. For every instance φ : G → H of atomic embeddability, an application of Split(ν ) produces an equivalent instance.
Preprocessing(φ). Input: an instance φ : G → H of atomic embeddability.
(1) For every pipe ρ ∈ E (H ) with |φ −1 [ρ]| ≤ 2, apply Suppress(ρ).
(2) For every atom ν ∈ V (H ), where G φ (ν ) is disconnected, apply Split(ν ).
Lemma 3. For an instance φ : G → H of atomic embeddability of size n, Preprocessing runs in
O (n) time and returns an equivalent normal instance φ .
Proof. By Lemmas 1 and 2, the instance φ  is equivalent to φ. Step (1) eliminates virtual vertices
of degree less than 3, and Step (2) does not change the degree of any vertex in local graphs. Step (2)
splits the local graphs G φ (ν ), ν ∈ V (H ), into connected components. Hence, φ  is normal. Step (1)
runs in O (1) time for each pipe of degree less than 3. Step (2) runs in O (m) time for every local

graph G φ (ν ) with m = m(ν ) edges; which yields an overall running time of O (n).
Data Structures. For a normal instance φ : G → H , let G be the disjoint union of all local graphs
G φ (ν ), ν ∈ V (H ). We maintain the graphs G and G by adjacency lists. We maintain the set V (H ) of
atoms implicitly: Each connected component in G corresponds to an atom ν ∈ V (H ). We maintain
the set E (H ) of pipes as follows: For every pipe ρ ∈ E(H ), we maintain two pointers to the two
virtual vertices in G that correspond to ρ; and also maintain the set φ −1 [ρ] ⊂ E (G) of edges mapped
to ρ in a doubly linked list. Furthermore, for each edge uv ∈ φ −1 [ρ], with φ(u) = μ and φ(v) = ν ,
we maintain a pointer to ρ, and to the edge in G φ (μ) (resp., G φ (ν )) that joins the virtual vertex
corresponding to ρ and u (resp., v).
For every connected component G φ (ν ) of G, we maintain G φ− (ν ) (i.e., the multigraph obtained
by suppressing vertices of degree 2), if G φ (ν ) is not a cycle, by adjacency lists. Furthermore, we
maintain the block tree of G φ− (ν ), which is a bipartite graph that represents incidences between
cut vertices and blocks (i.e., maximal 2-connected components). For each block of G φ− (ν ), we also
maintain an SPQR decomposition tree introduced by Di Battista and Tamassia [22], which is a
hierarchical decomposition used for representing all 2-cuts and their bridges. For each vertex v of
G, we maintain indicator variables that record whether v is an ordinary or virtual vertex, whether
it is a proper cut vertex or contained in a proper 2-cut. At initialization, all these data structures
13:10

Fig. 6. An atomic embedding of G on S(ν ) before and after operation Detach(v). The operation turns an
ordinary vertex v, the center of p-star G φ (ν ), into deg(v) leaves.

can be computed in linear time in the size of G and H . The data structures can be updated in
linear time if necessary. (Currently available dynamic data structures for planarity testing and
SPQR-trees, with sublinear update times, support some but not all of our graph operations; see,
e.g., [33, 34].)
As we shall see, whenever our algorithm creates a pipe of degree less than 3, it is immediately
suppressed. If our algorithm modifies a graph G φ (ν ) in a way that it disconnects into components,
then we assume that it immediately splits the corresponding atom ν as described above. In particular, our data structure supports the operation Split(ν ) in 0 time. In the remainder of the algorithm,
we may assume that every instance of atomic embeddability is normal.
2.4

Elementary Operations

In this section we describe operations used in our algorithm for a given instance φ : G → H of
atomic embeddability. Each operation modifies the instance φ. Each operation is local in the sense
that it affects an atom ν and possibly one or two of its neighbors. That is, the modifications incur
changes in G φ (ν ), and possibly in G φ (ν  ), for some of the neighbors ν  of ν .
The following operation turns an ordinary vertex v into deg(v) leaves, see Figure 6.
Detach(v). Let v be an ordinary vertex in a graph G φ (ν ) such that every {v}-bridge is a ppath (that is, either G φ (ν ) is a p-star with center v, or G φ (ν ) is a p-path with a pole at v). Let
vu 1 , . . . , vu deg(v ) denote the edges incident to v in G. Remove v and its incident edges from G.
Then introduce deg(v) new vertices v 1 , . . . , v deg(v ) and add edges ui vi , for all i ∈ [deg(v)] to G.
Finally, define φ(vi ui ) = φ(vui ).
By Observation 1, the following is straightforward.
Lemma 4. For an instance φ : G → H of atomic embeddability, Detach(v) produces an equivalent
instance φ . The operation can be implemented in O (deg(v)) time.
In the following we define the operation of enclosing a bridge in G φ (ν ), see Figure 7. This operation is analogous to stretching of a local branch in [15] except that we apply it in a more general
setting.
Enclose(B). We are given a {v 1 , . . . , vk }-bridge B in G φ (ν ). The operation does not modify G
except for subdividing its edges. We first describe the changes in H , and then the changes in the
local graphs. Create a new atom ν  and a new pipe νν . Replace every pipe ρ = μν that corresponds
to a virtual vertex in B \ {v 1 , . . . , vk } with a new pipe μν . For every ordinary vertex u ∈ V (B) \
{v 1 , . . . , vk }, set φ(u) = ν . For every edge e ∈ E (G), for which the pipe φ(e) = ρ = μν has been
replaced by ρ  = μν , set φ(e) = ρ . If vi u ∈ E (B), and vi or u is a virtual vertex of G φ (ν ), then
subdivide vi u ∈ E(G) by a vertex w and define φ(w ) as follows: If vi is virtual, then put φ(w ) = ν ;

Atomic Embeddability, Clustered Planarity, and Thickenability

13:11

Fig. 7. An atomic embedding of G on S(ν ) before and after operation Enclose(B), where B (colored blue) is
a {v}-bridge of G φ (ν ) and v is a virtual vertex corresponding to the pipe ρ.

otherwise put φ(w ) = ν . Finally, update the definition of φ on the edges of B according to the value
of φ on the vertices of G (this is uniquely determined since νν  is not a multiple pipe in E (H )).
For the purpose of the running time analysis, the effect of the operation on G φ (ν ) is that we
move the subgraph induced by B \ {v 1 , . . . , vk } from G φ (ν ) into a new graph G φ (ν  ), and introduce a virtual vertex corresponding to the pipe νν  in both G φ (ν ) and G φ (ν  ), whose degree is
k
i=1 degB (v i ). We will be often tacitly using the following lemma.
Lemma 5. Given an instance of atomic embeddability φ, an application of Enclose(B) results in an

equivalent instance φ  : G  → H . The operation can be implemented in O ( ki=1 degB (vi )) time.
Proof. The equivalence is a consequence of Observation 1.
For the forward direction, given the set of embeddings E μ of G φ (μ), μ ∈ V (H ), inherited from
an atomic embedding of G, we construct embeddings E μ of G φ  (μ), μ ∈ V (H  ), inherited from
an atomic embedding of G  as follows. For μ  {ν, ν  }, we put E μ = E μ . The embedding of Eν 
is obtained from Eν |B by identifying v 1 , . . . , vk , which are incident to a common face, thereby
turning them into a single virtual vertex corresponding to the pipe νν . Finally, Eν is obtained
from Eν by contracting B \ {v 1 , . . . , vk } into a single virtual vertex corresponding to the pipe νν .
For the opposite direction, given the set of embeddings E μ of G φ (μ), μ ∈ V (H  ), inherited from
an atomic embedding of G , we construct embeddings E μ of G φ (μ), μ ∈ V (H ), inherited from an
atomic embedding of G as follows. For every μ ∈ V (H ) \ {ν }, we put E μ = E μ . Finally, Eν is
obtained from the atomic embedding of G  on S(ν ) ∪ S(ν  ) by filling the holes corresponding to

pipes, except for νν , and contracting the fillings to points.
In the following, we define the operation that replaces a vertex u in G φ (μ) by an edge uu , and
distributes the edges incident to u among u and u . The operation produces an equivalent instance
if the rotation of u is fixed, see Figure 8.
Stretch(u, Eu ). We are given a vertex u in G φ (μ) and a set Eu = {ua 1 , . . . , ua  } of edges incident
to u where 0 < |Eu | < deg(u). We distinguish between two cases, depending on whether u is an
ordinary or a virtual vertex.
If u is ordinary, then remove the edges ua 1 , . . . , ua  , introduce a new vertex u  and a new edge
uu , as well as new edges u a 1 , . . . , u a  in G φ (μ).
If u is virtual, then let ρ = μν ∈ E (H ) be the pipe corresponding to the virtual vertex u in G φ (μ)
and v in G φ (ν ); and assume that uai = ai bi , for i ∈ [], where b1 , . . . , b  are vertices in G φ (ν ).
Do the following: Introduce a new pipe ρ  = μν in H corresponding to new virtual vertices u  in

13:12

Fig. 8. An atomic embedding of G on S(ν ) before and after applying Stretch(u, {uv 1 , uv 2 , uv 3 }). Vertex u is
either ordinary (left) or virtual (right). If u is a virtual vertex, it corresponds to a pipe ρ = μν .

G φ (μ) and v  in G φ (ν ); introduce a new connected component in G, which is a cycle with two
vertices and two parallel edges f , f  forming a multiple edge such that φ( f ) = ρ and φ( f  ) = ρ ;
and finally, modify φ by setting φ(ai bi ) = ρ , for all i ∈ []. In local graphs this corresponds to
replacing uai and vbi with u ai and v ai , respectively, for all i ∈ []; and inserting two new edges
uv and u v  in the two local graphs, respectively, and subdividing each with an ordinary vertex.
For the purposes of the running time analysis (below) the effect of the operation can be seen
as the replacement of u by an edge whose two endpoints have degrees  + 1 and deg(u) −  +
1, respectively (hence the sum of their degrees equals deg(u) + 2). If u is a virtual vertex (i.e.,
corresponds to a pipe between two atoms), then both virtual vertices corresponding to the same
pipe go through these changes. By Observation 1, the following is straightforward.
Lemma 6. Given an instance of atomic embeddability φ such that the edges in Eu are incident to u,
and are consecutive in the rotation of vertex u in every embedding of G φ (μ) inherited from an atomic
embedding of G, then the operation Stretch(u, Eu ) produces an equivalent instance.
Corollary 1. For an instance φ : G → H of atomic embeddability, if a vertex u ∈ V (G φ (ν )) has
a fixed rotation, in which the edges in Eu are consecutive, then Stretch(u, Eu ) produces an equivalent
instance.
The operation of contraction that follows is applied to an edge ρ = ν μ of H and it produces an
equivalent instance if each of G φ (ν ) and G φ (μ) is a p-star or p-path.
Contract(ρ). We are given a pipe ρ = μν such that ρ is the only pipe between μ and ν . Contract
the pipe μν in H into an atom μν and change φ accordingly (that is, put φ(u) = μν for all the
vertices mapped by φ to μ or ν ). Let φ  denote the resulting instance. Note that G φ  ( μν ) might
be disconnected, in which case operation Split( μν ) is automatically applied to obtain a normal
instance, as explained in Section 2.3. Since ρ is the only pipe between μ and ν the operation does
not introduce a loop in H .
Several incarnations of the following lemma, which is a consequence of Belyi’s theorem [6],
were proved in related papers; see for example, [2, Lemma 3.2], [28, Claim 7], or [29, Lemma 6].
Lemma 7. Let μν ∈ E (H ) be a pipe such that either (i) both G φ (μ) and G φ (ν ) are p-stars, or (ii)
G φ (μ) or G φ (ν ) is a p-path; and in both cases, ρ corresponds to vertices u and v of maximum degree
in G φ (μ) and G φ (ν ), respectively. Then Contract(μν ) produces an equivalent instance φ .
Proof. Denote by φ  : G → H  the map returned by Contract(μν ). First assume that φ : G → H
is atomic embeddable. Then there exists an atomic embedding E : G → H (where every vertex
a ∈ V (G) is embedded in S(φ(a)); and every edge ab ∈ E (G) is embedded as a Jordan arc in
S(φ(a)) ∪ S(φ(b)) as specified in the definition of atomic embedding). Let S( μν ) = S(μ) ∪ S(ν ).
Atomic Embeddability, Clustered Planarity, and Thickenability

13:13

Fig. 9. An atomic embedding of G on S(ν ) ∪ S(μ) before and after operation Delete(uv), where uv ∈ G φ (ν )
and uw = uv. The operation reduces the degree of a virtual vertex v of G φ (ν ) such that v is incident to a
cut-edge, and at most three edges of G pass through its corresponding pipe ρ.

Then the thickening H  of H  equals H , and the embedding E : G → H = H  witnesses that
φ  : G → H  is atomic embeddable.
Conversely, assume that φ  : G → H  is atomic embeddable. Let E  : G → H  be an atomic
embedding. Consider the restriction of E  : G → H  on the surface S( μν ). Filling the holes of
S( μν ) with discs, and then contract them to points, to obtain an embedding of G φ  ( μν ) on the
sphere S 2 .
First, assume that (i) both G φ (μ) and G φ (ν ) are p-stars: G φ (μ) is the union of internally vertexdisjoint paths between u and a vertex set Va , and similarly G φ (ν ) is the union of internally vertexdisjoint paths between v and a vertex set Vb . Consequently, G φ  ( μν ) is the union of internally
vertex-disjoint paths between vertices in Va and Vb . (Note that G φ  ( μν ) need not be connected.)
By suppressing the internal vertices of the paths between Va and Vb , we obtain an embedding of a
bipartite multigraph G φ− ( μν ) with partite sets Va and Vb on S 2 .
By Belyi’s theorem [6], there exists a Jordan curve β : S 1 → S 2 that intersects every edge of
−
G φ  ( μν ) in exactly one point, and the intersection is transversal. The curve β partitions S 2 into
two parts, A and B. We can subdivide the edges of G φ− ( μν ) to obtain an embedding of G φ  ( μν )
on a sphere such that the curve β crosses an edge e ∈ E(G φ  ( μν )) if and only if e ∈ φ −1 [ρ].
Consequently, by contracting A (resp., B) into a vertex v (resp., u), we obtain an embedding of
G φ (ν ) (resp., G φ (μ)) on a sphere, where the vertices u and v have opposite rotations. Observation 1
now implies that φ : G → H is atomic embeddable.
Next, assume that (ii) G φ (μ) or G φ (ν ) is a p-path: Without loss of generality, assume that G φ (μ)
is a p-path, with poles u and w. Consequently, G φ  ( μν ) is a subdivision of G φ (ν ), obtained by
subdividing the edges incident to v. In particular, G φ− ( μν ) is isomorphic to G φ− (ν ), where vertex
w in G φ− ( μν ) corresponds to vertex v in G φ− (ν ). By imposing the rotation of w on v (and the
opposite rotation on u), Observation 1 implies that φ : G → H is atomic embeddable, completing
the proof.

Our last operation deletes a cut edge of a subcubic local graph; see Figure 9 for an illustration.
Delete(e). We are given a cut edge e = uv in a subcubic local graph G φ (ν ). If both u and v are
ordinary vertices, then delete uv from E (G) (thereby disconnecting G φ (ν ) into two components
and invoking Split(ν )). Else assume w.l.o.g. that u is ordinary and v is virtual. Let ρ = μν be the
pipe that corresponds to v in G φ (ν ) and a vertex v  in G φ (μ), and let uw ∈ E (G) be the edge
corresponding to uv, that is, uw = uv = v w, where v w ∈ G φ (μ). Delete the edge uw from
G (thereby reducing the degree of ρ to 2), then Suppress(ρ) (which turns v and v  into ordinary
vertices), and finally, insert an edge v w into both G and G φ (μ).
Lemma 8. For every instance φ : G → H of atomic embeddability, an application of Delete(e)
produces an equivalent instance φ .
13:14

Proof. First, assume that φ is atomic embeddable. If both u and v are ordinary vertices, then
the deletion of edge uv produces an atomic embeddable instance by Observation 1 and Lemma 2.
If u is ordinary and v is virtual, then we can clearly delete uv = uw from G, suppress the pipe
ρ of degree at most 2, and insert the edge v w (which was already present in G φ (μ) before the
operation). By Observation 1, and Lemmas 1 and 2, φ  is atomic embeddable.
Conversely, assume that φ  is atomic embeddable. Then there exists an atomic embedding E  :

G → H  with respect to φ , where H  is the thickening of H . Note that φ  (u)  φ  (v) since φ 
is normal and uv was a cut edge in G φ (ν ). Let νu , νv ∈ V (H  ) be atoms such that φ  (u) = νu and
φ  (v) = νv . Recall that the embedding E  determines a rotation system on all local graphs of φ .
Consider disjoint plane embeddings of G φ  (νu ) and G φ  (νv ) with the rotation systems inherited
from E  such that u and v are incident to a common face. If v is a virtual vertex of degree 3 in
G φ (ν ) (hence v  has degree 3 in G φ  (μ)), we can choose plane embeddings of G φ  (νu ) and G φ  (νv )
with the additional property that the insertion of the edge uv as a Jordan arc between u and v
yields the embedding of G φ (ν ) in which the rotation at v is opposite to the rotation of v  in G φ  (μ).
All other local graphs of φ are the same as in φ , and their rotation systems are inherited from E .
By Observation 1, φ is atomic embeddable.

2.5

Toroidal Instance

An instance φ : G → H is toroidal if H is a cycle and for every atom ν ∈ V (H ), the graph G φ (ν )
is a p-path in which both poles are virtual vertices, and correspond to the two pipes incident to ν .
Given an instance φ : G → H and a subgraph H  ⊆ H , such that the restriction of φ to G  =
−1
φ [H ], denoted φ  : G  → H , is toroidal, we say that H  is a toroidal cycle in H .
In this section, we show how to decide toroidal instances of atomic embeddability in linear time.
First, note that in a toroidal instance every ordinary vertex has degree 2, hence G is a disjoint union
of cycles, say C 1 , . . . , Ct , for some t ∈ N. Furthermore, φ maps each cycle Ck , k ∈ [t], to a walk
that winds around H once or more times.
Lemma 9. Let φ : G → H be a toroidal instance of atomic embeddability, where H is a cycle, and G
is a vertex-disjoint union of cycles C 1 , . . . , Ct . The instance φ is positive if and only if φ(Ck ) is a walk
of the same length for all k ∈ [t] (that is, every cycle winds around the torus H the same number of
times).
Roughly speaking, Lemma 9 follows by the intersection form of the closed curves on the torus.
Indeed, whether a pair of curves could be crossing free on the torus is governed by their homology
classes [32, Example 2A.2. and Corollary 3A.6.(b)] over Z.
Proof. In an atomic embedding, each cycle Ck is embedded on the torus H as a closed curve,
whose homology class over Z is given by a pair (i k , jk ) ∈ Z2 , where we assume w.l.o.g. that the
first component i k is the length of the walk φ(Ck ) divided by |V (H )|. In particular, we may assume
that i k > 0. Since in an atomic embedding, Ck is mapped to a Jordan curve in H , its homology
class must be primitive [39, 41], or in other words, gcd(i k , jk ) = 1, for all k ∈ [t].
The “if” part follows by observing that the restriction of φ to a cycle Ci is a positive instance,
no matter how many times φ(Ci ) winds around H . Indeed, a desired atomic embedding lies in
the primitive homology class (i k , 1). A sufficiently small neighborhood of the embedding of Ci in
H is homeomorphic to an annulus, into which all cycles C 1 , . . . , Ct can be embedded given the
hypothesis is satisfied. It remains to prove the “only if” part.
It is well-known that the minimum number of crossings between a pair of closed curves in
homology classes (i k , jk ) and (i  , j  ) is given as the absolute value of

 
0 −1 i 
(i k jk )
= i  jk − i k j  ,
1 0 j

Atomic Embeddability, Clustered Planarity, and Thickenability

13:15

which counts the algebraic intersection of the pair, see [53, Section 6.4.3], and in particular Exercise 6.4.3.2. therein.4 Since the cycles C 1 , . . . , Ct embed into H as pairwise disjoint curves in an
atomic embedding, we have i  jk − i k j  = 0 for every pair of distinct k,  ∈ [t]. It follows that
jk
j
i k = i  . Since gcd(i k , j k ) = 1, gcd(i  , j  ) = 1, i k > 0, and i  > 0, we have that i k = i  and j k = j  ,
which concludes the proof.

Corollary 2. We can decide whether a toroidal instance φ : G → H is atomic embeddable in time
O (n), where n is the number of edges and vertices in G.
Proof. Under the assumptions, G is the union of vertex-disjoint cycles C 1 , . . . , Ct , for some
t ∈ N. We report that the instance is positive if and only if φ(Ci ) is a walk of the same length for
all k ∈ [t]. This algorithm is correct by Lemma 9. It runs in linear time in the size of G, as the

length of the walks φ(Ci ), i ∈ [t], can be computed in a simple traversal of G.
2.6

The Subcubic Case

An instance φ : G → H of atomic embeddability is subcubic if G φ (ν ) is subcubic (i.e., its
maximum degree is at most 3) for every ν ∈ V (H ). In this section, we show how to decide subcubic instances of atomic embeddAbility in linear time. By Observation 1, it is enough to check
whether all graphs G φ (ν ), ν ∈ V (H ), are planar, and they each have embeddings in the plane such
that for every pipe μν ∈ E (H ), the virtual vertices corresponding to μν in G φ (μ) and G φ (ν ) have
opposite rotations.
Planarity testing for a graph takes linear time [35]. Let n be the number of vertices and edges in G.
Then the disjoint union of all local graphs G has O (n) size (since each vertex in V (G) corresponds
to a unique ordinary vertex, and every edge in E (G) corresponds to one or two edges in G). Hence
planarity testing for G takes O (n) time.
In the subcubic case, every vertex in the local graphs G φ (ν ), ν ∈ V (H ), has at most two possible
rotations (including the vertices of 1- and 2-cuts). We show how to encode the possible embeddings
of each local graph by a Boolean variable, and then reduce the existence of compatible embeddings
to a 2SAT formula, which can be solved in O (n) time.
We start with a postprocessing algorithm that eliminates 1- and 2-edge-cuts from local graphs.
Postprocessing. We are given a subcubic instance φ : G → H of atomic embeddability.
(1) While there exists a cut edge e in some G φ (ν ), ν ∈ V (H ), apply Delete(e).
(2) While there exists a proper 2-edge-cut {e, f } in a local graph of φ, such that e = u 1v 1 and
f = u 2v 2 , where both v 1 and v 2 are in a {u 1 , u 2 }-bridge B of G φ (ν ), apply Enclose(B) (creating
a new pipe ρ B of degree 2), and Suppress(ρ B ).
Lemma 10. For a subcubic instance φ of atomic embeddability of size n, Postprocessing runs in O (n)
time, and it returns an equivalent subcubic instance φ  of size O (n) in which every local graph is a
cycle, a p-path, or a subdivided 3-connected planar graph.
Proof. The while loop in Step (1) decreases the number of edges in E (G), so it terminates after
O (n) iterations, and uses O (n) time. The while loop in Step (2) decreases the number of 2-edge-cuts
in local graphs, and hence, it also terminates after O (n) iterations in O (n) time. By Lemmas 1, 8,
and 5, the instance φ  : G  → H  returned by the Postprocessing algorithm is equivalent to φ.
4 We

refrain from properly defining algebraic intersection, since we will not need it in the sequel, and refer an interested
reader to [53]. To the readers who are unfamiliar with the intersection form it might be only clear that the absolute value
of the expression gives a lower bound on the number of crossings between the curves. Nevertheless, for our purpose this
lower bound is sufficient, and therefore we do not delve into more details to show that the lower bound is always tight.
13:16


Step (1) can only decrease the degree of a local graph, and Step (2) creates a pair of ordinary vertices of degree 2. Since φ is a subcubic instance, φ  is also subcubic. When the algorithm terminates,
then G φ− (ν ) has neither cut edges nor 2-edge-cuts, for all ν ∈ V (H  ).
We claim that every local graph G φ  (ν ), ν ∈ V (H  ), is biconnected. (Note that we assume that

φ is normal, and hence, G φ  (ν ) is connected.) Let v be an arbitrary vertex in G φ  (ν ). Vertex v is
incident to at least two edges in each {v}-bridge, otherwise we would find a cut edge. However,
deg(v) ≤ 3, so there is at most one {v}-bridge, and v is not a cut vertex. This completes the proof
of the claim.
It remains to show that every local graph G φ  (ν ), ν ∈ V (H  ), is a cycle, a p-path, or a subdivided 3-connected graph. Consider a graph G φ  (ν ). Suppose it is neither a cycle nor a subdivided
3-connected graph. Let {u, v} be a proper 2-cut. If degB (u) = degB (v) = 1, for some {u, v}-bridge
B, then B is a uv-path, as otherwise the edges incident to u and v in B would form a 2-edge-cut
in G φ− (ν ). The number of {u, v}-bridges is at least two and at most three, since G φ  (ν ) is subcubic. If there are three {u, v}-bridges, then degB (u) = degB (v) = 1 for every {u, v}-bridge B, and
hence, every {u, v}-bridge is a uv-path, and so G φ  (ν ) is a p-path. Suppose now that there are two
{u, v}-bridges. Then neither bridge can be a uv-path, otherwise {u, v} would not be a proper 2-cut.
Therefore max{degB (u), degB (v)} ≥ 2 for every {u, v}-bridge B. Since G φ  (ν ) is subcubic, this implies min{degB (u), degB (v)} = 1 for both bridges. By Observation 2, there are edges e = uu  and
f = vv  in the two bridges that form a 2-edge-cut in G φ− (ν ), contradicting the assumption that no
such 2-edge-cut exists.

Lemma 11. We can decide whether a subcubic instance φ : G → H is atomic embeddable in O (n)
time, where n is the number of edges and vertices in G and H .
Proof. By Lemma 10, we may assume that every local graph G φ (ν ), ν ∈ V (H ), is a cycle, a
subcubic p-path, or a subdivided 3-connected planar graph. We can ignore cycles, as vertices of
degree 2 have only one rotation. Every subdivided 3-connected planar graph has two possible
rotation systems given by an embedding, that are equivalent up to a reflection. In every embedding
of a p-path with poles u and v, the cyclic order of the {u, v}-bridges around u and v are reverse of
each other. If deg(u) = deg(v) = 3, the three {u, v}-bridges have two possible cyclic orders, that is,
the p-path have two possible rotation systems in a plane embedding.
For every local graph G φ (ν ), ν ∈ V (H ), that is a p-path or a subdivided 3-connected graph, we
introduce a Boolean variable x ν , which is the indicator variable for the two possible rotation systems of G φ (ν ) in a plane embedding. In other words, we fix an embedding of G φ (ν ) corresponding
to x ν = 1, and then the reflected embedding corresponds to x ν = 0. Since φ is a normal instance,
every pipe has degree 3, that is, it corresponds to two virtual vertices of degree 3 in two local
graphs. In particular, for every pipe ρ = μν , both x μ and x ν are defined. For every pipe ρ = μν , we
introduce a constraint x μ = x ν if the rotations of its two corresponding virtual vertices in G φ (μ)
and G φ (ν ) in the embedding of G φ (μ) and G φ (ν ), respectively, corresponding to x ν = 1 and x μ = 1
are opposite of each other; and x μ = ¬x ν otherwise.
These constraints yield an instance of 2SAT with O (|V (H )|) Boolean variables and O (|E (H )|)
constraints, which can be solved in O (n) time. If the 2SAT instance is positive then the graphs
G φ (ν ), ν ∈ V (H ), each have an embedding in the plane such that for every pipe μν ∈ E (H ),
the corresponding virtual vertices in G φ (μ) and G φ (ν ) have opposite rotations. It follows that φ
is a positive instance by Observation 1. Conversely, if φ is a positive instance, then the atomic
embedding of G induces plane embeddings of the local graphs such that for every pipe μν ∈ E (H ),
the corresponding virtual vertices have opposite rotations. By construction, the indicator variables

x ν , ν ∈ V (H ), satisfy all constraints of the 2SAT instance.

Atomic Embeddability, Clustered Planarity, and Thickenability
2.7

13:17

Main Algorithm

We define two subroutines and then present our main algorithm. Subroutine 1 ensures that our
instance has some desirable properties, and Subroutine 2 decreases the maximum degree over all
local graphs G φ (ν ), for all atoms ν ∈ V (H ), that are not contained in a toroidal cycle C of H .
The crucial part of our algorithm reduces the maximum degree in local graphs over all atoms
that are not in toroidal cycles. Specifically, for an instance φ of atomic embeddability, let
• V ∗ (H ) (resp., E ∗ (H )) be the set of atoms (resp., pipes) in H that are not in any toroidal cycle
of H ; and
• let Δ(φ) be the maximum degree over all vertices of all local graphs G φ (ν ), ν ∈ V ∗ (H ), if
V ∗ (H )  ∅, and let Δ(φ) = 2 if V (H ) = ∅.
We first call Subroutine 1 for a normal instance φ, and show that it returns an equivalent instance
in which the proper 1- and 2-cuts in local graphs G φ (ν ), ν ∈ V ∗ (H ), are in a special form, as
described in the following definition.
Definition 2. An instance φ of atomic embeddability is d-nice, for d ≥ 3, if it meets the following
three conditions:
(N1) Δ(φ) ≤ d.
(N2) If deg(v) = d for a vertex v of some local graph G φ (ν ), ν ∈ V (H ), then v has a fixed rotation,
or G φ (ν ) is a p-path or a p-star.
(N3) If ρ = μν ∈ E (H ), such that both G φ (μ) and G φ (ν ) are p-stars, and ρ corresponds to virtual
vertices of degree at least d, then ρ is the only pipe between μ and ν .
We present a subroutine that takes a normal instance φ as an input, and returns a Δ-nice normal
instance for the maximum degree Δ over all local graphs, that is, Δ = Δ(φ) (as shown in Lemma 12
and Corollary 4 below).
Subroutine 1. Input: a normal instance φ of atomic embeddability, where Δ(φ) ≥ 4.
(i) While there is a proper 2-cut {u, v} and a nonseparable {u, v}-bridge B in G φ (ν ), for some
ν ∈ V (H ), such that max{deg(u), deg(v)} = Δ, but neither u nor v is a cut vertex, then do
the following: Perform Stretch(u, Eu ), where Eu is the set of edges in E(B) incident to u; and
perform Stretch(v, Ev ), where Ev is the set of edges in E(B) incident to v. If u or v is a virtual
vertex corresponding to a pipe μν and G φ (μ) is nonplanar, report that the instance φ is not
atomic embeddable and exit the subroutine.
(ii) While there is a proper 2-edge-cut {e, f } in G φ (ν ), for some ν ∈ V (H ), then let e = u 1v 1 and
f = u 2v 2 such that both v 1 and v 2 are in a {u 1 , u 2 }-bridge B of G φ (ν ), then apply Enclose(B)
(creating a new pipe ρ B of degree 2), and Suppress(ρ B ).
(iii) While there is a proper cut vertex v with deg(v) = Δ in some local graph of φ, then successively apply Enclose(B) for every bridge B of v (thereby turning every bridge of v into a
p-path). Apply Suppress(ρ B ) if applicable.
In Section 2.8 (cf. Corollary 4), we show that Subroutine 1 terminates and analyze its running
time. Here we prove that if it terminates, it returns a Δ(φ)-nice instance.
Lemma 12. For an instance φ of atomic embeddability, if Subroutine 1 terminates, it either returns
an equivalent, normal, and Δ(φ)-nice instance φ , or reports that φ is not atomic embeddable.
Proof. Let Δ = Δ(φ) for short. By Lemmas 1, 5, and 6, Subroutine 1 returns an equivalent
instance φ  upon termination. Note that instance φ  is normal, since we apply Suppress(ν B ) to any
pipe of degree less than 3. The operations in Subroutine 1 do not increase the maximum degree in

13:18

Fig. 10. An atomic embedding of G on S(ν ) before and after Step (i), where u is a virtual vertex of G φ (ν )
corresponding to the pipe ρ, and v is an ordinary vertex of G φ (ν ).

Fig. 11. The operation Enclose(B) in Step (ii) eliminates every proper 2-cut {u, v} in G φ (ν ) that has exactly
two {u, v}-bridges. Either one of the {u, v}-bridges is separable (left), or there exists a separable {u 1 , u 2 }-bridge
such that degB (u 1 ) = degB (u 2 ) = 1 (right).

any local graph outside of toroidal cycles; and make no changes at all in local graphs in toroidal
cycles. Consequently, Δ(φ  ) ≤ Δ.
At the end of Step (i), every {u, v}-bridge is separable for every proper {u, v}-cuts where
max{deg(u), deg(v)} = Δ; see Figure 10. Consider Step (ii) now and assume that {u, v} is a proper
2-cut in G φ (ν ) such that min{deg(u), deg(v)} ≥ 3 and max{deg(u), deg(v)} = Δ.
If there exist exactly two (separable) {u, v}-bridges in G φ (ν ) (none of which is a subdivided edge
as otherwise {u, v} would not be a proper 2-cut), then Step (ii) eliminates the proper 2-cut {u, v}
by a single application of Enclose(.), due to Observation 2, and does not introduce any new proper
2-cut. Indeed, up to symmetry there are two cases to consider depending on whether degB (u) = 1
or degB (u) = deg(u) − 1, and degB (v) = 1 or degB (v) = deg(v) − 1; see Figure 11.
If there exist at least three (separable) {u, v}-bridges in G φ (ν ) such that max{deg(u), deg(v)} = Δ,
then Step (ii) turns G φ (ν ) into a p-path with the poles u and v.
Hence, at the end of Step (ii), for every proper 2-cut {u, v} we have (a) max{deg(u), deg(v)} < Δ;
or (b) u or v is a cut vertex of degree Δ; or (c) u and v are the poles of a p-path. In particular, every
vertex w with deg(w ) = Δ in a local graph G φ (μ), is a proper 1-cut, or a pole of a p-path, or has
fixed rotation.
Step (iii) successively turns every cut vertex of degree Δ into the center of a p-star. It creates new
2-cuts within these p-stars and possibly in adjacent atoms, but it does not create any new vertex
of degree Δ. Hence, at the end of Subroutine 1, φ satisfies (N1) and (N2). For property (N3), note
that by enclosing all the bridges of the center of every p-star in G of degree Δ, Step (iii) eliminates
possible problematic multiple pipes ρ = μν in H , where ρ corresponds to a pair of centers of pstars G φ (μ) and G φ (ν ). Overall, the instance φ  returned by Subroutine 1 upon termination meets

conditions (N1)–(N3), consequently φ  is Δ-nice.
Journal of the ACM, Vol. 69, No. 2, Article 13. Publication date: January 2022.

Atomic Embeddability, Clustered Planarity, and Thickenability

13:19

Fig. 12. A path (ρ 1 , ρ 2 , ρ 3 ) in H through the atoms μ 0 , . . . , μ 3 . The graph G φ (μ 0 ) is a p-star, G φ (μ 1 ) and
G φ (μ 2 ) are p-paths, and G φ (μ 3 ) is 3-connected. In each local graph, the virtual vertices corresponding to
ρ 1 , ρ 2 , or ρ 3 are vertices of maximum degree. The bottom three subfigures show the effect of Step (iv.a) and
Step ((v.c)) of Subroutine 2 on the graph G in this instance.

Degree reduction. We are now ready to present the crucial subroutine of our algorithm that reduces Δ(φ) by eliminating all vertices of degree Δ(φ) that are not in toroidal cycles. (See Figures 12
and 13 for the possible relations between virtual vertices of degree Δ(φ).)
13:20

Fig. 13. An illustration of the setting in Step (iv.b), analogous to Figure 12.

(iv)

(v)

(vi)
(vii)

Subroutine 2. Input: a normal and Δ-nice instance φ of atomic embeddability, where Δ =
Δ(φ) and Δ ≥ 4.
While there exists a pipe μν ∈ E ∗ (H ) of degree Δ such that G φ (μ) or G φ (ν ) is a p-path, do
the following. Suppose w.l.o.g. that G φ (μ) is a p-path.
(a) If μν is not a multiple edge apply Contract(μν ).
(b) Else there exists a pair of pipes ρ 1 and ρ 2 joining μ with ν . Let ui and vi , resp., be virtual
vertices in G φ (μ) and G φ (ν ) corresponding to ρ i for i ∈ {1, 2}. Note that u 1 and u 2 are the
poles of the p-path G φ (μ); and both v 1 and v 2 are fixed due to (N2), as μ is not in a toroidal
cycle. Apply Stretch(v 1 , E 1 ) and Stretch(v 2 , E 2 ), where Ei is a set of Δ/2 consecutive
edges in the rotation at vi , for i ∈ {1, 2}. If G φ (μ) becomes nonplanar, report that the
instance is not atomic embeddable and exit the subroutine.
For every pipe μν ∈ E ∗ (H ) of degree Δ that corresponds to virtual vertices u and v in G φ (μ)
and G φ (ν ), respectively, do:
(a) If both u and v have fixed rotations (in G φ (μ) and G φ (ν ), resp.), then check whether the
two rotations are compatible. If they are incompatible, then report that φ is not atomic
embeddable and exit the subroutine. Otherwise, apply Stretch(u, Eu ), where Eu is a set of
Δ/2 consecutive edges in the rotation of u.
(b) If neither u nor v has a fixed rotation, then apply Contract(μν ). This contracts μν into a
new atom, denoted by μν , and combines G φ (μ) and G φ (ν ) into a new graph G φ ( μν ). If
G φ ( μν ) is nonplanar, report that φ is not atomic embeddable and exit the subroutine.
(c) Else assume w.l.o.g. that u has fixed rotation in G φ (μ), and is incident to edges
(uv 1 , . . . , uv Δ ) in this cyclic rotation order. Successively apply Stretch(u, .), turning vertex u into an induced binary tree with Δ − 2 vertices. If G φ (ν ) is nonplanar, report that the
instance is not atomic embeddable and exit the subroutine.
For every ordinary vertex v ∈ V (G φ (ν )), ν ∈ V (H ), with deg(v) = Δ that has fixed rotation,
apply Stretch(v, Ev ), where Ev is a set of Δ/2 consecutive edges in the rotation of v.
For every ordinary vertex v ∈ V (G φ (ν )), ν ∈ V (H ), with deg(v) = Δ that is part of a 1- or
2-cut, apply Detach(v).

This completes the description of Subroutine 2. In Section 2.8 we show that Subroutine 2 terminates and analyze its running time. In Lemma 14 below, we prove that if it terminates, it returns
an instance φ  with Δ(φ  ) < Δ(φ). We first clarify when an operation Stretch(.) can create a proper
1- or 2-cut.
Lemma 13. Let u be a vertex in G φ (ν ) such that deg(u) ≥ 4, and assume that operation Stretch(u, .)
produces an instance φ  in which u is replaced by an edge uu . If u is not a proper 1-cut in G φ (ν ), then
Atomic Embeddability, Clustered Planarity, and Thickenability

13:21

neither u nor u  is a proper 1-cut in G φ  (ν ). If u neither is a proper 1-cut nor belongs to a proper 2-cut
in G φ (ν ), then neither u nor u  belongs to a proper 2-cut in G φ  (ν ).
Proof. For the sake of contradiction suppose w.l.o.g. that u  is a proper 1-cut in G φ  (ν ). If we
contract the edge uu  back into the vertex u, the vertex u is a proper 1-cut in G φ (ν ). Indeed, if B
is the {u  }-bridge containing u, then B contains at least three edges since deg(u) ≥ 3. Thus, the
bridge B gives rise to a {u}-bridge after we contract uu .
Similarly, suppose that u  or u belongs to a proper 2-cut {v, w } of G φ  (ν ). If we contract the edge
uu  back into the vertex u, no loops are created, since uu  is not a multiple edge. We show that the
vertex u belongs to a proper 2-cut in G φ (ν ) or is a proper 1-cut. The proper 2-cut {v , w  } or 1-cut
{v  } in G φ (ν ) is constructed as follows. We put v  = u and w  = u if v ∈ {u, u  } and w ∈ {u, u  },
respectively, and we put v  = v and w  = w, otherwise. The proper 2-cut {v , w  } is, in fact, a
proper 1-cut if v  = w  = u.
To see that {v , w  } is a proper 1-cut if v  = w , we observe that vw = uu  and apply the
definitions of a proper 1-cut and proper 2-cut. Otherwise, w.l.o.g. v = u, and thus, v  = u. Let
B denote the {v, w }-bridge containing uu  edge. The bridge B is not a (subdivided) edge, since
deg(u  ) ≥ 3 and w  u . Thus, after contracting uu , the bridge B gives rise to at least one {v , w  }
bridge that is not a subdivided edge. Hence, {v , w  } is a proper 2-cut.
Lemma 14. For a Δ(φ)-nice instance φ : G → H of atomic embeddability, if Subroutine 2 terminates,
then it either returns an equivalent normal instance φ  : G  → H  such that Δ(φ  ) < Δ(φ), or reports
that φ is not atomic embeddable.
Proof. Let Δ = Δ(φ). We show that every step of Subroutine 2 maintains a Δ-nice normal
instance equivalent to φ until it terminates; and it either returns such an instance φ  or reports
that φ  is not atomic embeddable. Subroutine 2 maintains a normal instance until termination,
since it does not create virtual vertices of degree 2 and Split(.) is applied automatically whenever
a local graph disconnects into two or more components.
Step (iv.a) produces an equivalent instance by Lemma 7: Each Contract(.) operation merges a
local graph G φ (ν ) with a p-path G φ (μ) and produces a new local graph G φ ( μν ), where G φ− ( μν ) is
isomorphic to G φ− (ν ), so the instance remains Δ-nice. In Step (iv.b), the two invocation of Stretch(.)
produce an equivalent instance by Lemma 6. At the end of Step (iv), none of the local graphs outside
of toroidal cycles is a p-path of degree Δ.
In Step (v.a), the rotation of the virtual vertices u and v must be compatible in any atomic embedding by Observation 1. If they are compatible, then operation Stretch(u, .) produces an equivalent
instance by Corollary 1; and the resulting instance is still Δ-nice since no new proper 1-cut or 2-cut
is introduced in G φ (μ) and G φ (ν ) by Lemma 13.
In Step (v.b), both G φ (μ) and G φ (ν ) are p-star, centered at u, and v resp., since instance is Δ-nice,
and p-paths of degree Δ have already been eliminated. By Lemma 7, Contract(μν ) produces an
equivalent instance. The resulting instance is still Δ-nice, since the maximum degree of G φ ( μν )
is less than Δ; and G φ ( μν ) is planar if φ is atomic embeddable by Observation 1.
In Step (v.c), operation Stretch(u, .) for a fixed vertex u yields an equivalent instance by
Corollary 1. If the rotation of u is incompatible with a p-star centered at v, Stretch(u, .) may turn
G φ (ν ) into a nonplanar graph, and then φ is not atomic embeddable by Observation 1. Note that
G φ (ν ) is a p-star, since p-paths have been eliminated in Step (iv). Successive Stretch(.) operations
eliminate the only vertex of degree Δ of G φ (ν ), namely v. The graph G φ (μ) − remains 3-connected
by Lemma 13, and so the resulting instance is Δ-nice.
13:22

The equivalence of Step (vi) follows by Lemma 6, and the resulting instance is still Δ-nice, since
operation Stretch(v, .) does not introduce a 1-cut in G φ (ν ) that would violate the Δ-nice property
by Lemma 13.
In Step (vii), operation Detach(u) is applied in a Δ-nice instance, hence it produces an equivalent
instance by Lemma 4, which obviously remains Δ-nice.
For the remainder of the proof, assume that Subroutine 2 returns an instance φ . The operations
in Subroutine 2 do not increase the maximum degree outside of toroidal cycles; and make no
changes within toroidal cycles. Consequently, Δ(φ  ) ≤ Δ.
It remains to prove that Δ(φ  ) < Δ, i.e., that Subroutine 2 eliminates vertices of degree Δ from
all local graphs outside of toroidal cycles; call these vertices Δ-critical. Since φ is Δ-nice, every
Δ-critical vertex in a local graph has a fixed rotation, or it is a center of a p-star, or a pole of a ppath. Steps (iv)–(vii) each eliminate one or two Δ-critical vertices (possibly a pair of corresponding
virtual vertices), and do not create any new Δ-critical vertices. Steps (iv)–(v) eliminate all possible Δ-critical virtual vertices; and Steps (vi)–(vii) eliminate all Δ-critical ordinary vertices. Since
Subroutine 2 maintains a Δ-nice instance, it ultimately eliminates all Δ-critical vertices, and so

Δ(φ  ) < Δ, as claimed.
Algorithm. We are given a normal instance φ of atomic embeddability.
(I) While Δ(φ) ≥ 4, do the following.
(a) Call Subroutine 1 (which turns φ into a Δ-nice instance) followed by Subroutine 2 (which
reduces Δ(φ)). If Subroutine 1 or Subroutine 2 reports that the instance φ is not atomic
embeddable return False and terminate the algorithm.
(II) For each connected component C of H , let G (C) = φ −1 [C].
(a) If C is a toroidal cycle of H , decide atomic embeddability for φ|G (C ) using Corollary 2.
(b) Else decide atomic embeddability for φ|G (C ) using Lemma 11.
(III) If φ|G (C ) is atomic embeddable for all components C of H , then return True; else return
False.
In Section 2.8 we show that the Algorithm terminates and analyze its running time. Here we
show that if it terminates it correctly decides the atomic embeddability problem.
Lemma 15. Suppose that Algorithm terminates for an instance φ : G → H . Then the algorithm
returns True if and only if φ is atomic embeddable.
Proof. Since the input φ is normal, it is a valid input for Subroutine 1 in the first iteration
of Step (I.a). By Lemma 12, Subroutine 1 returns a Δ(φ)-nice instance and therefore the input
for Subroutine 2 is valid. In any subsequent iteration of Step (I.a), Subroutine 1 receives a valid
input as Subroutine 2 returns a normal instance φ ∗ (however, this instance need not be Δ(φ ∗ )nice). By Lemmas 12 and 14, the while loop in Step (I) terminates after at most Δ(φ) − 3 iterations,
and returns an equivalent instance (or correctly reports that φ is not atomic embeddable). If the
Algorithm proceeds to Steps (II)–(III), the correctness of the output follows from Corollary 2 and
Lemma 11.

2.8 Running Time Analysis
Potential Functions. We measure the progress of the algorithm, for an instance φ : G → H , using
three parameters defined as follows. Recall that G denotes the disjoint union of all local graphs
G φ (ν ), ν ∈ V (H ).
• Let N (φ) = |V (G)|, that is, be the number of vertices of G.
Atomic Embeddability, Clustered Planarity, and Thickenability

13:23

• Let N ≥3 (φ) = |{v ∈ V (G) : deg(v) ≥ 3}|, i.e., the number of vertices of G of degree 3 or
higher.
• Let the potential of φ be

(max{0, deg(v) − ξ (v)}) σ (v ) ,
Φ(φ) =
v ∈V ( G)

where ξ (v) = 2 and σ (v) = 3 if v is a proper cut vertex, ξ (v) = 2 and σ (v) = 2 if v is part of
a proper 2-cut but not a cut vertex, and ξ (v) = 3 and σ (v) = 1 otherwise.
Note that max{0, deg(v) − 2} = 0 if deg(v) ≤ 2, that is, the vertices of local graphs of degree
less than 3 do not contribute to the potential. Clearly deg(v) < N (φ) for every v ∈ V (G), and so
Φ(φ) ≤ N 4 (φ) is a trivial upper bound. Our analysis hinges on the following charging scheme.
Overview. We show below (Lemma 19) that each iteration of Step (I.a) of the Algorithm decreases
the potential. This readily implies that the while loop in Step (I) terminates (hence the Algorithm
terminates, which completes the proof of correctness). Recall that Step (I.a) runs Subroutines 1
and 2, that is, it applies Steps (i)–(vii). We show that both the number of elementary operations
performed and the number of new vertices created in Steps (i)–(vii) are bounded from above by
a constant times the decrease of the potential. Step (ii) does not change the potential, so we need
additional machinery to bound its running time: We use the parameters N (φ) and N ≥3 (φ). We
continue with the specifics.
Analysis. Recall that each iteration of the while loop of Step (I) of the Algorithm calls Subroutine 1 followed by Subroutine 2. The two subroutines jointly perform Steps (i)–(vii). We use the
following notation. Assume that φ 0 is the input of Subroutine 1, and we obtain instances φ 1 , . . . , φ 7
at the end of Step (i), . . . , (vii). Denote by Gi the union of all local graphs in the instance φ i for
i = 1, . . . , 7. The following lemma is helpful for the analysis of Step (i).
Lemma 16. Let {u, v} be a proper 2-cut in a local graph G φ (ν ) such that max{deg(u), deg(v)} ≥ 4;
and let B be a nonseparable {u, v}-bridge. Then one iteration of the while loop in Step (i) produces an
instance φ  such that Φ(φ  ) < Φ(φ) and N (φ  ) ≤ N (φ) + 4.
Proof. If u (resp., v is ordinary), then operation Stretch(.) creates 1 new vertex in G; and if it
is virtual, it creates at most 2 new vertices in G. Overall at most 4 new vertices are created, all of
which are of degree 3 or higher. That is, N (φ  ) ≤ N (φ) + 4.
In the following we analyze how the operation impacts the degree of vertices. If u is an ordinary
vertex, then Stretch(.) changes its degree from deg(u) to deg(u) −degB (u) +1 ≤ deg(u); and creates
a new vertex of degree degB (u) + 1 ≤ deg(u). If u is a virtual vertex, corresponding to a pipe ρ,
then both virtual vertices corresponding to ρ go through the same changes.
By Lemma 13, the new vertices created by Stretch(.) are not cut vertices (although they may
participate in proper 2-cuts). If u is a virtual vertex, then the corresponding virtual vertex w in an
adjacent atom μ might be a cut vertex or a vertex in a proper 2-cut. By Lemma 13, if w or a new
vertex w  created by Stretch(u, .) in G φ  (μ) is a proper cut vertex (resp., contained in of a proper
2-cut), then so is w in G φ (μ). In particular, for any existing vertex z in G φ (μ) (including vertex w),
the exponent σ (z) cannot increase, and ξ (z) cannot decrease. Consequently, the contribution of z
to the potential cannot increase.
The change in the potential incurred by u is most
(degB (u) − 1) 2 + (deg(u) − degB (u) − 1) 2 − (deg(u) − 2) 2 ,

13:24
which is nonpositive by convexity, and equals to zero if and only if degB (u) = 1. Since B is a
nonseparable {u, v}-bridge, we have max{degB (u), degB (v)} ≥ 2, and the two Stretch(.) operations
at u and v jointly decrease the potential.

Corollary 3. Let φ 0 be a normal instance of atomic embeddability and let Δ = Δ(φ 0 ). Then the
while loop in Step (i) terminates and returns an instance φ 1 , after at most Φ(φ 0 ) − Φ(φ 1 ) iterations,
such that N (φ 1 ) ≤ N (φ 0 ) + 4(Φ(φ 0 ) − Φ(φ 1 )).
Proof. By Lemma 16, each iteration of the while loop in Step (i) decreases the potential. Consequently, the while loop terminates, and performs at most Φ(φ) − Φ(φ  ) iterations. Each iteration
applies up to two Stretch(.) operations, at u or v for some proper {u, v}-cut, and increases the number of vertices by at most 4. By Lemma 16, the number of vertices increases by at most four times
the decrease of the potential. Summation over all iterations of the while loop in Step (i) yields

N (φ 1 ) ≤ N (φ 0 ) + 4(Φ(φ 0 ) − Φ(φ 1 )).
We can now focus on Steps (ii)–(vii).
Lemma 17. Let φ 1 be an instance returned by Step (i). Then the while loop in Step (ii) terminates
after at most N ≥3 (φ 1 ) iterations, and it returns an instance φ 2 such that N (φ 2 ) < N (φ 1 ) + 2N ≥3 (φ 1 ),
N ≥3 (φ 2 ) = N ≥3 (φ 1 ), and Φ(φ 2 ) = Φ(φ 1 ).
Proof. Let φ be an instance at the beginning of one iteration of the while loop in Step (ii). Since
φ is normal, every local graph G φ (ν ) is connected. Let {e, f } be a proper 2-edge-cut in G φ (ν ),
let e = u 1v 1 and f = u 2v 2 such that both v 1 and v 2 are in a {u 1 , u 2 }-bridge B. Note that each
component of G φ (ν ) \ {e, f } contains a vertex that has degree at least 3 in G φ (ν ), otherwise one
of the components would be a path, and the 2-edge-cut would not be proper. In one iteration
of Step (ii), an operation Enclose(.) replaces G φ (ν ) with two local graphs obtained by removing
edges e and f , and inserting two new paths (u 1 , wu , u 2 ) and (v 1 , wv , v 2 ), where wu and wv are new
ordinary vertices of degree 2. In particular, Φ and the number of vertices of degree at least 3 do
not change, and the total number of vertices in G increases by 2.
It follows that Φ(φ 2 ) = Φ(φ 1 ) and N ≥3 (φ 2 ) = N ≥3 (φ 1 ). Since each iteration in the while loop of
Step (ii) increases the number of components of G, but each new component contains at least one
vertex of degree 3 or higher, the number of iterations is at most N ≥3 (φ) − 1. Summation over all

iterations yields N (φ 2 ) ≤ N (φ 1 ) + 2N ≥3 (φ 1 ) − 2.
Now we are ready to show that Subroutine 1 terminates.
Corollary 4. For an instance φ 0 of atomic embeddibility of size n, Subroutine 1 terminates.
Proof. By Corollary 3 the while loop in Step (i) terminates. By Lemma 17, Step (ii) terminates
and eliminates all proper 2-edge-cuts containing an edge that is incident to a vertex of degree
Δ = Δ(φ 0 ). Finally, in the while loop of Step (iii), each iteration decreases the number of vertices
of degree Δ in local graphs that are not p-stars. Therefore this while loop terminates, as well. 
Note that Step (iii) increases the potential. We analyze the combined effect of Steps (iii)–(vii),
and show that they jointly decrease the potential, and we can charge the number of operations,
as well as the number of new vertices to the decrease of the potential. The following observation
will be helpful.

Lemma 18. Let d and d 1 , . . . , dk be positive integers such that d = ki=1 di , d ≥ 4, and k ≥ 2. Then
we have
k
k


(max{0, di − 2}) 2 +
(max{0, di − 2}) 3 .
(1)
(d − 2) 3 ≥ (2d − 5) +
i=1

i=1
Atomic Embeddability, Clustered Planarity, and Thickenability

13:25

Proof. We distinguish between three cases. In Case 1, k = d (hence di = 1 for all i ∈ [k]). Then
the right hand side of (1) is less than 2(d − 2). Clearly, 2(d − 2) ≤ (d − 2) 3 for d ≥ 4.
In Case 2, we assume that 2 < k < d. First note that for every i ∈ [k], we have di − 1 ≥
max{0, di − 2}, and so (di − 1) 3 ≥ (max{0, di − 2}) 3 + (max{0, di − 2}) 2 . Elementary calculation
yields
3

3

k
k
k



(d − 2) 3 =  di  − 2 =  di  − k + k − 2 =  (k − 2) +
(di − 1) 
i=1


 i=1 
 i=1 


k
k


(di − 1) 2
= (k − 2) 3 +
(di − 1) 3 + 3(k − 2) 2 (d − k ) + 3(k − 2)
i=1

+ 6(k − 2)

k


i=1

(di − 1)(d − di − k + 1) +

i=1

≥

k


k


(di − 1)

i=1

(di − 1) 3 + 3(k − 2) 2 (d − k ) ≥

i=1

3

k


k


(d j − 1)(d − d j − k + 1)

j=1

(max{0, di − 2}) 3 +

i=1

k


(max{0, di − 2}) 2 + (2d − 5),

i=1

where we have dropped some nonegative terms, and used the inequality 3(k−2) 2 (d−k ) ≥ 3(d−3) ≥
(2d − 5) + (d − 4) ≥ 2d − 5 for d ≥ 4.
In Case 3, assume k = 2. Then, using d ≥ 4 again, we have
3
2
2
2
2




(di − 1) 3 + 3
(di − 1) =
(di − 1) 3 + 3(d − 2)
(d − 2) 3 =  (di − 1)  ≥
i=1
i=1
i=1
 i=1

k
k


(max{0, di − 2}) 3 +
(max{0, di − 2}) 2 + (2d − 5),
>
i=1

i=1



as claimed.

Lemma 19. Consider Steps (iii)–(vii) in an invocation of Subroutine 1 followed by Subroutine 2. We
have Φ(φ 2 ) > Φ(φ 7 ), N (φ 7 ) ≤ N (φ 2 ) + O (Φ(φ 2 ) − Φ(φ 7 )), and the number of operations performed
in Steps (iii)–(vii) is O (Φ(φ 2 ) − Φ(φ 7 )).
Proof. We begin by noting that note that none of these steps increases the number of vertices
of degree Δ or higher in local graphs. Ultimately all vertices of degree Δ outside of toroidal cycles
are eliminated. We continue with a brief overview of the proof.
Overview. Each operation in Steps (iii)–(vii) is associated to either a unique vertex of degree Δ,
or two virtual vertices of degree Δ that correspond to the same pipe. In Step (iii) and Steps (vi)–(vii),
this is vertex v; in Steps (iv)–(v), these are virtual vertices u and v corresponding to the pipe μν . We
consider each vertex v of degree Δ in the instance φ 2 , and analyze how the operations associated
with v change the potential and the total number of vertices over Steps (iii)–(vii). Let D(Φ, v) and
D(N , v), resp., denote the changes in Φ(.) and N (.) incurred by the operations associated with
vertex v. We claim that for every vertex v of degree Δ in G2 , we have
D(Φ, v) ≤ 0,

(2)

with equality if and only if v is a local graph G φ 2 (ν ) where ν is in a toroidal cycle; and
D (N , v) + 20 D(Φ, v) ≤ 0.

(3)

13:26
Note that (2) holds with a strict inequality for at least one vertex v. Indeed, we have Δ = Δ(φ 3 ) =
Δ(φ 2 ), and so there is a vertex of degree Δ in some local graph of φ 2 outside of toroidal cycles.
Summation over all vertices of degree Δ then yields

Φ(φ 7 ) = Φ(φ 2 ) +
D(Φ, u) < Φ(φ 2 ),
u ∈V ( G2 ):deg(u )=Δ

N (φ 7 ) = N (φ 2 ) +



D(N , u) ≤ N (φ 2 ) + 20(Φ(φ 2 ) − Φ(φ 7 )).

u ∈V ( G2 ):deg(u )=Δ

Elimination of p-paths. Recall that each iteration of Step (iv.a) applies Contract(μν ) on a pipe μν
corresponding to virtual vertices u in G φ (μ) and v in G φ (ν ). Without loss of generality, assume
that G φ (μ) is a p-path with poles u and w. Operation Contract(μν ) eliminates u and v, and creates
a new local graph G φ ( μν ) where G φ− ( μν ) is isomorphic to G φ (ν ). For the analysis of D (Φ, .)
and D(N , .), we assume that this operation eliminates u and w; and vertex v of G φ (ν ) survives in
G φ ( μν ). Thus, the effect of Contract(μν ) is neutral for v, although v may become an ordinary
vertex if w is ordinary before the operation.
Inequalities (2)–(3) clearly hold for any vertex v in toroidal cycles. For all other vertices of degree
Δ, we distinguish between three cases as follows.
Vertices of fixed rotation. Let v be a vertex of fixed rotation with deg(v) = Δ = Δ(φ 2 ) in φ 2 .
If v is an ordinary vertex, then Steps (i)–(vi) do not change v, and in Step (vi) a Stretch(v, .)
operation replaces v with two vertices, v 1 and v 2 , where deg(v 1 ) + deg(v 2 ) = Δ + 2, and
min{deg(v 1 ), deg(v 2 )} ≥ 3. In this case, D(Φ, v) = (deg(v 1 ) − 3) + (deg(v 2 ) − 3) − (Δ − 3) = −1,
and D(N , v) = 1. If v is a virtual vertex, then deg(v) decreases in Step (iv.b), (v.a), or (v.c). In
Step (iv.b) or (v.a), one Stretch(.) operation has the same effect on the potential as for ordinary
vertices, D (Φ, v) = −1, but it creates two new vertices, and so D (N , v) = 2. In Step (v.c), Δ − 3
successive Stretch(.) operations replace v with Δ − 2 vertices of fixed orientation with degree 3.
Thus, D (Φ, v) = 0 − (Δ − 2), and D(N , v) ≤ Δ − 3. In all cases, (2)–(3) follow.
Poles of p-paths. Let v be a pole of a p-path G φ 2 (ν ) with deg(u) = Δ = Δ(φ 2 ). Denote the other
pole of the p-path by u, where obviously deg(u) = deg(v) = Δ. If both u and v are ordinary, then
Steps (i)–(v) do not change G φ 2 (ν ). The Detach(.) operation in Step (vii) replaces v with Δ new
vertices of degree 1. Thus, D (Φ, v) = −(Δ − 2) 2 and D(N , v) = Δ − 1, thus (2)–(3) follow.
Assume that u or v is a virtual vertex. Then a Contract(.) operation in Step (iv.a) eliminates both
u and v. We have D(Φ, u) = −(Δ − 2) 2 and D(N , u) = −1.
Step (iv.b) applies Stretch(.) to a pair of virtual vertices u 1 and u 2 of G φ (μ). Thus, we have
D(Φ, u 1 ) = D(Φ, u 2 ) < 0 and D(N , u 1 ) = D(N , u 2 ) = 1.
Proper cut vertices. Let v be a proper cut vertex in φ 2 with deg(v) = Δ = Δ(φ 2 ) in some local
graph G φ 2 (ν ). Assume v has k ≥ 2 bridges B 1 , . . . , Bk , and degBi (v) = di for all i ∈ [k]. Step (iii)
successively encloses the k bridges. Note that v remains a proper cut vertex of degree Δ. Step (iii)

creates new virtual vertices v 1 , . . . , vk in the p-star centered at v, where deg(v) = ki=1 deg(vi ).
Every new virtual vertex vi , i ∈ [k], is part of a proper 2-cut {v, vi }.
Moreover, every virtual vertex vi , i ∈ [k], corresponds to another virtual vertex vi in the local
graph of an atom created by enclosing Bi ; this local graph is isomorphic to Bi , where vi plays the
role of v. In particular vi cannot be a cut vertex, but it may be contained in a proper 2-cut. At the
end of Step (iii), we obtain a Δ-nice instance φ 3 in which each local graph that contains a virtual
vertex vi, i ∈ [k], cannot contain any vertex of degree Δ. Therefore, Steps (iv)–(vii) do not change
the degree of vi, and vi cannot become a cut vertex for any i ∈ [k].
Atomic Embeddability, Clustered Planarity, and Thickenability

13:27

Next we consider the possible changes to the p-star centered at v in Steps (iv)–(vii). Step (iv.a)
may turn v into an ordinary vertex as noted above (but it changes neither D (Φ, v) nor D (N , v)).
Since v is a proper cut vertex of degree Δ, the next step that can possibly modify the p-star is
Step (v.b), (v.c), or (vii). In Step (v.b), a Contract(.) operation eliminates vertex v, and any vertex
vi , i ∈ [k] may become a cut vertex. In Step (v.c), successive Stretch(.) operations replace v with
Δ − 2 vertices of degree 3. Since each of these vertices could be a proper cut vertex or part of a
proper 2-cut, they contribute at most (Δ − 2)(3 − 2) 3 = Δ − 2 to the potential. Finally, if v is an
ordinary vertex, then Detach(v) in Step (vii) replaces v with Δ vertices of degree 1, which does not
contribute to the potential.
At the beginning of Step (iii), vertex v contributes (Δ − 2) 3 to Φ(φ 2 ). At the end of Subroutine 2,
the contribution of v, together with the virtual vertices vi and vi, over all i ∈ [k], is bounded
above by
k
k


(Δ − 2) +
(max{0, di }) 3 +
(max{0, di }) 2 .
i=1

i=1

By Lemma 18, D(Φ, v) ≤ −(Δ − 3) ≤ −Δ/4.
Let us estimate the number of new vertices created in these steps. In Step (iii), the Enclose(.)
operations create a pair of virtual vertices for each bridge of v (i.e., 2k vertices), and up to k ordinary
subdivision vertices. In Step (v.c), Stretch(.) operations create Δ − 2 new vertices; and in Step (vii),
the Detach(v) operation increases the number of vertices by Δ − 1. Therefore, D(N , v) ≤ 3k + 2Δ −
3 ≤ 5Δ − 3. Since D (Φ, v) ≤ −Δ/4, inequalities (2) and (3) follow.

Lemma 20. For an instance φ 0 of atomic embeddability of size n, Algorithm terminates, it performs
O (N ≥3 (φ 0 ) + Φ(φ 0 )) operations, and runs in O (n8 ) time.5
Proof. Consider one iteration of the while loop of Step (I), which calls Subroutines 1 and 2. By
Corollary 3, Step (i) terminates, performs O (Φ(φ 0 ) − Φ(φ 1 )) operations, and returns and instance
φ 1 with and N (φ 1 ) ≤ N (φ 0 ) + 4(Φ(φ 0 ) − Φ(φ 1 )). By Lemma 17, Step (ii) terminates, performs
O (N ≥3 (φ 0 )) operations, and returns an instance φ 2 with N ≥3 (φ 2 ) = N ≥3 (φ 1 ) and Φ(φ 2 ) = Φ(φ 1 ).
Similarly, by Lemma 19, the sequence of Steps (iii)–(vii) terminates, performs O (Φ(φ 2 ) − Φ(φ 7 ))
operations, and returns an instance φ 7 with N (φ 7 ) ≤ N (φ 2 ) + O (Φ(φ 2 ) − Φ(φ 7 )).
Using the definition of the potential, we can bound its initial value by

(max{0, deg(v) − ξ (v)}) σ (v ) ≤ n · (Δ(φ 0 ) − 2) 3 ≤ O (n4 ).
Φ(φ 0 ) =
v ∈V ( G0 )

The while loop in Step (I) of the Algorithm terminates after Δ(φ 0 ) − 3 ≤ n iterations, since each
iteration decreases Δ(.) by Lemmas 12 and 14. In each iteration, the potential Φ(.) decreases, and
N (.) increases by at most constant times the decrease of the potential by Lemmas 16, 17, and 19.
In particular, for every instance φ ∗ in intermediate phases of Step (I), both N (φ ∗ ) and N ≥3 (φ ∗ ) are
bounded by O (n + Φ(φ 0 )) ≤ O (n4 ).
Each operation in Steps (i)–(vii) can be implemented in O (N (φ ∗ )) time, where φ ∗ is the instance
for which the operation is applied; this allows for planarity testing [35], and recomputing block
trees and SPQR-trees [23] after each operation6 . As noted above, we have N (φ ∗ ) ≤ O (n + Φ(φ 0 )) ≤
O (n4 ). The overall running time of all invocations of Step (i)–(vii) is O (n4 (n + Φ(φ 0 ))) ≤ O (n8 ).
By Lemmas 9 and 11, Steps (II)–(III) of the Algorithm run in O (N (φ 7 )) ≤ O (n + Φ(φ 0 )) ≤ O (n4 )
time.

5 Optimizing

the running time analysis further, which we believe is possible, is beyond the scope of this work.
(log N (φ ∗ )) O (1) time, which
would improve the overall running time of our algorithm to n 4 (log n) O (1) .
6 Recent dynamic data structures [33, 34] may support the implementation of Steps (i)–(vii) in
13:28

Theorem 1. There is an algorithm that determines whether a simplicial map φ : G → H is atomic
embeddable in time polynomial in the number of edges and vertices in G and H .
Proof. Let φ be an instance φ of atomic embeddability of size n, where n is the number of edges
and vertices in G and H . The Preprocessing algorithm runs in O (n) time and returns an equivalent
normal instance φ 0 of size O (n) by Lemma 3. The main Algorithm for φ 0 terminates in O (n8 ) time
by Lemma 20, and determines whether φ 0 is atomic embeddable by Lemma 15. Since φ 0 and φ are
equivalent, this also determines whether φ is atomic embeddable.

3 BEYOND ATOMIC EMBEDDINGS
Since atomic embeddability is tractable, it makes sense to consider its generalizations in which
every atom can have genus higher than 0.
We consider the generalized atomic embedding problem for a simplicial map φ : G → H ,
where G and H are multigraphs without loops. The only difference from atomic embeddAbility
is that we define the surface H as follows: For each atom ν ∈ V (H ), we construct S(ν ) from an
oriented surface of genus д(ν ) without boundary (rather than a 2-sphere), and remove deg(ν ) holes.
Hence, an instance for generalized atomic embeddability is a pair (φ, д), where φ is a simplicial
map φ : G → H and д : V (H ) → N0 .
Problem 4 (Generalized Atomic Embeddability). Given a simplicial map φ : G → H , where
G and H are multigraphs without loops, and a function д : V (H ) → N0 , decide whether a generalized
atomic embedding of G with respect to φ exists.
In this section, we show that generalized atomic embeddability is NP-hard, and therefore
also NP-complete, even when д(ν ) ≤ 1 for all atoms ν ∈ V (H ), and the number of vertices in
φ −1 [ν ] is at most 7 for each atom ν with д(ν ) = 1.
The NP-hardness proof is based on the embeddings of K 3,4 on a torus. For an embedding of K 3,4
on a torus, we say that two vertices u and v of the same vertex class (i.e., with the same degree)
have the same rotation if the rotation of u is (uv 1 , . . . , uvk ) and the rotation at v is (vv 1 , . . . , vvk ),
where {v 1 , . . . , vk } is a vertex class of K 3,4 .
Lemma 21. In every embedding of K 3,4 on the torus the four cubic vertices do not all have the
same rotation; any other system of rotations for the four cubic vertices can be realized by a toroidal
embedding.
Proof. The first author and Kynčl [26, Theorem 7(b)] recently proved that in every embedding
of K 3,4 on the torus there exist two cubic vertices that do not have the same rotation.
It remains to prove that in the following two cases there exists an embedding of K 3,4 on the
torus. In one case, exactly two of the four cubic vertices have the same rotation; and in the other
case, exactly three of the four cubic vertices have the same rotation. Desired toroidal embeddings
are given in Figure 14 (middle) and (right).

Theorem 2. Generalized Atomic Embeddability is NP-hard.
Proof. We reduce Generalized Atomic Embeddability from Not-All-Eqal 3SAT, which is
known to be NP-complete. An instance of Not-All-Eqal 3SAT is given by a pair (A, C), where
A is a finite set of Boolean variables and C is a finite set of clauses, each of which is a conjunction
of three literals. Each literal is either a variable a ∈ A or the negation of a, denoted by ¬a. An
instance (A, C) is positive if there exists an assignment τ : A → {true, false} such that at least
one and at most two literals are true in every clause.
Atomic Embeddability, Clustered Planarity, and Thickenability

13:29

Fig. 14. The complete bipartite graph K 3,4 (left) and its toroidal embeddings (middle and right) in which four
cubic vertices do not have the same rotation. The torus is obtained by identifying the pairs of opposite sides
of the square as indicated by arrows.

Fig. 15. The variable gadget G 0a = C a P1 for the NP-hardness reduction of Not-All-Equal 3SAT to Generalized atomic embeddability.

Given an instance (A, C) of Not-All-Eqal 3SAT, we construct an instance (φ, д) for Generalized atomic embeddability, and show that it is positive if and only if (A, C) is positive. Let
C = {C 1 , . . . , Cn }.
We construct an instance (φ, д), where φ : G → H , д : V (H ) → N0 . Let the multigraph H be a
p-star with a center ν 0 , and n additional atoms ν 1 , . . . , νn , such that there are six pipes between ν 0
and each νi , for i = 1, . . . , n. In particular, all pipes are incident to the center ν 0 .
We put д(ν 0 ) = 0 and д(ν 1 ) = . . . = д(νn ) = 1. We describe φ via a construction of local graphs
G 0 = G φ (ν 0 ), G 1 = G φ (ν 1 ), . . ., G n = G φ (νn ). For ease of presentation, we describe the local graphs
as semi-directed graphs (in which some edges are directed and others are undirected). However, in
the eventual instance (φ, д), all local graphs are undirected (by replacing every directed edge with
an undirected edge.)
The local graphs G 1 , . . . , G n are each isomorphic to K 3,4 . Let G 0 be a disjoint union of the semidirected graphs G 0a = C a P1 , for all a ∈ A, where P1 is a path of length 1 and C a is a directed cycle
whose length is equal to four times the number of occurrences of a in the clauses in C. Let C Pa and
a denote the two vertex-disjoint directed induced cycles in G a of length equal to the length of
CN
0
C a , whose orientation is inherited from C a ; see Figure 15 for an illustration.
Next, we define the pipes in E(H ) by designating the pairs of corresponding virtual vertices in
the local graphs; furthermore, for if a pipe ρ ∈ E (H ) corresponds to virtual vertices u and v in two
local graphs, we also specify a bijection between the set of edges incident to u and the set of edges
incident to v. All vertices in local graphs that are not designated to be virtual will be ordinary. This
uniquely determines the instance (φ, д).
13:30

For each clause Ci ∈ C, i ∈ [n], we define three pipes in E (H ). Assume that Ci = (1 ∨ 2 ∨ 3 ).
Recall that G i is isomorphic to K 3,4 . Label the three vertices of degree 4 in G i by −1, 0, and 1
resp.; two arbitrary cubic vertices by the literal 1 ; and the remaining two cubic vertices by the
literals 2 and 3 , respectively. Let every cubic vertex v ∈ V (G i ) be virtual, and let each vertex
a if  = ¬a. We
with label  ∈ {1 , 2 , 3 } correspond a vertex u in C Pa if  = a and a vertex u in C N
construct the bijection between the edges incident to v and the edges incident to u as follows: Let
the edge between v and the vertex of G i with label −1, 0, and 1, resp., correspond to the incoming,
undirected, and outgoing edge incident to v  in G 0 . This completes the definition of the instance
(φ, д)
It remains to prove that (φ, д) is a positive instance if and only if (A, C) is a positive instance.
Assume that (φ, д) is a positive instance of Generalized atomic embeddAbility. Let E : G → H
be a generalized atomic embedding of G with respect to (φ, д). Since д(ν 0 ) = 0, the restriction of
E on S(ν 0 ) yields an embedding of G 0 in the plane; and an embedding of G i in the torus for all
i ∈ [n]. We construct a satisfying assignment τ : A → {true, false} based on the embedding of
G 0 as follows. We put τ (a) = true if the incoming, undirected, and outgoing edges incident to a
vertex v in C Pa appear in this counterclockwise order in the rotation of v in the embedding of G 0 ;
and we put τ (a) = false otherwise. Note that the truth value of a is independent of the choice of
v. Also note that a literal  of the clause Ci , i ∈ [n], is satisfied if and only if the edges between the
vertex v labeled by  and the vertices labeled by −1, 0 and 1 in G i appear in this clockwise order in
the rotation at v in the embedding of G i . Note that Observation 1 holds also for generalized atomic
embeddability. By Lemma 21 and Observation 1, every clause Ci must be satisfied by at least one1
and at most two literals, and hence, (A, C) is positive.
Now assume that (A, C) is a positive instance of Not-All-Eqal 3SAT. We can easily reverse
the argument in the previous paragraph as follows. Let τ be a satisfying assignment witnessing
that the instance is positive. We define a toroidal embedding of G i , for all i ∈ [n], as follows. For
every literal , the edges between a vertex v labeled by  and the vertices labeled by −1, 0, and 1
in G i appear in this clockwise order in the rotation of v in the embedding of G i if and only if  is
satisfied by τ . Lemma 21 and Observation 1 imply that we can construct the desired embeddings
of G 1 , . . . , G n on tori. This also determines a desired spherical embedding of G 0 , which concludes
the proof.

4 THICKENABILITY AND CONNECTED SEFE-2
In this section, we give a polynomial-time reduction of atomic embeddability (Problem 3), as
well as Connected sefe-2 (defined below) to thickenability (Problem 2). Recall that an instance
of atomic embeddability is given by a simplicial map φ : G → H . The instance is positive if its
output answer is True.
Thickenability. In the following, we express thickenability as a combinatorial problem, of
which atomic embaddability is a proper generalization, and then reduce atomic embEddability
to this problem.
Let P = (H , F ) denote a 2-polyhedron, where the multigraph H is the 1-skeleton of P, and F
is the set of facets in P, each represented by a cycle in H . Let F = { f 1 , . . . , f |F | }. A 2-polyhedron
P embeds in an orientable 3-manifold M (such as R3 ) if the following holds. The multigraph H
embeds in M so that the facets f 1 , . . . , f |T | are mapped into pairwise interior disjoint topological
discs D 1 , . . . , D |T | , resp., in M such that for every i ∈ [|F |] the boundary of D i , denoted by ∂D i ,
consists of the embedded cycle fi . The representation of P in M given by the discs D 1 , . . . , D |F | is
an embedding of P. The restriction of the embedding of P to the boundaries of these discs gives
the embedding of H .

Atomic Embeddability, Clustered Planarity, and Thickenability

13:31

For every v ∈ V (H ), the link of v in P is a multigraph L P (v) = (E(v), F (v)), where the vertex set
E (v) is the multiset of edges in H incident to v, and the multiset of edges F (v) is in a bijection with
the set of facets in P that are incident to v and we give it next. Every pair {e, д} ⊂ E (v) corresponds
to an edge in F (v) whose multiplicity equals the number of facets in F that contain both e and д.
If P = (H , F ) is thickenable, then it embeds in some orientable 3-manifold, and the intersection of
an embedding with a sufficiently small 2-sphere centered at (the embedding of) a vertex v ∈ V (H )
is a spherical embedding of the link L P (v). Indeed, the 2-sphere intersects edges of H incident to
v in points, and it intersects facets in F incident to v in Jordan arcs between these points.
Given a polyhedron P = (H , F ), the family {Ev : v ∈ V (H )}, where Ev is a planar (spherical)
embedding of L P (v), is compatible if, for every e ∈ E(H ) joining vertices u and v, the rotation at
e in Eu is opposite to the rotation of e in Ev . The observation in the previous paragraph proves
the “only if” part of the following theorem.
Theorem 3 (Neuwirth [44]). The 2-dimensional polyhedron P = (H , F ) is thickenable if and
only if there exists a family of compatible embeddings of the vertex links of H .
We show that testing the condition of Theorem 3 generalizes atomic embeddability and connected sefe-2.
Reduction. For a given instance φ : G → H of atomic embeddAbility, we define a 2dimensional polyhedron P (φ), and then show that P (φ) is thickenable if and only if φ is a posi F ) denote the 2-dimensional polyhedron,
tive instance of atomic embeddAbility. Let P (φ) = (H,

where H and F are defined as follows.
 is obtained by doubling the multigraph H and connecting each pair of
Roughly speaking, H
corresponding vertices in the two copies of H by new multiple edges, where every such edge
) of H
 is {(μ, 0), (μ, 1) : μ ∈ V (H )}, and we
corresponds to a vertex of G. Hence, the vertex set V (H
define its edge set as
) = {ρu = (μ, 0)(μ, 1) : μ = φ(u) for some u ∈ V (G)}∪
E (H
∪ {(ρ, 0) = (μ, 0)(ν, 0), (ρ, 1) = (μ, 1)(ν, 1) : ρ = ν μ ∈ E(H )}.
The facets in F are in bijection with the edges in E(G). Formally,
F = {(ρu = (μ, 0)(μ, 1), ρv = (μ, 1)(μ, 0)) : uv ∈ E (G) such that φ(u) = μ = φ(v)}∪
∪ {((ρ, 0), ρu , (ρ, 1), ρv ) : uv ∈ E (G) such that φ(u) = μ, φ(v) = ν, μ  ν, and ρ = φ(uv)}.
Thus, for every edge of uv ∈ E (G), if φ maps the vertices u and v to the same atom (resp., different
atoms) of H , then the edge uv corresponds to a facet of P bounded by 2 (resp., 4) edges.
It remains to prove that the polyhedron P (φ) has the desired property.
Lemma 22. For every instance φ : G → H of atomic embeddability, the 2-dimensional polyhedron
P (φ) is thickenable if and only if φ is a positive instance.
 F)
Proof. In order to prove the “only if” part, we assume that the polyhedron P = P (φ) = (H,
is thickenable. By Theorem 3, there exists a family of compatible spherical embeddings {Ev : v ∈
)}. Let {Sv : v ∈ V (H
)} be a family of pairwise disjoint
)} of the links {Lv (P ) : v ∈ V (H
V (H
). We construct an
2-spheres, and let Ev : Lv (P ) → Sv be compatible embeddings for all v ∈ V (H
atomic embedding of G on H with respect to φ in two steps as follows.
), we drill a small hole on S (μ,0) around (the embedding of) every
First, for every (μ, 0) ∈ V (H
), we have μν ∈ E (H )
vertex of L (μ,0) of the form (μ, 0)(ν, 0). Note that for every such vertex of V (H
by construction. Let f 1 , . . . , f deg((ρ,0)) denote the edges that are incident to (ρ, 0) = (μ, 0)(ν, 0) in
L (μ,0) (P ), for some ν μ = ρ ∈ E (H ). Formally, we remove from the 2-sphere S (μ,0) a small open disc
13:32

D (μ,0) ((ρ, 0)), thereby shortening edges f 1 , . . . , f deg((ρ,0)) incident to (ρ, 0) in E (μ,0) into Jordan
arcs a (ρ,0) ( f 1 ), . . . , a (ρ,0) ( f deg((ρ,0)) ), resp., ending on ∂D (μ,0) ((ρ, 0)), which is the boundary of the

denote the resulting 2-sphere with the removed disc(s) for all
closure of D (μ,0) ((ρ, 0)). Let S (μ,0)
).
(μ, 0) ∈ V (H
Second, for every edge ρ = μν , we identify the curves ∂D (μ,0) ((ρ, 0)) with ∂D (ν,0) ((ρ, 0)) via
a homeomorphism that identifies the endpoints of a (ρ,0) ( f ) and a (ρ,0)) ( f ) for every f  (ρ, 0).
A desired homeomorphism exists since the embeddings E (μ,0) are compatible. Let H denote the
surface obtained by the previous identifications, where each S (μ,0) is interpreted at S μ . Note that
we have just constructed a desired atomic embedding. Indeed, a vertex u ∈ V (G) is embedded by

; an edge uv ∈ E (G) where φ(u) = φ(v) is embedded by E (φ (v ),0) as ρu ρv ;
E (φ (u ),0) as ρu on S (φ
(u ),0)

and an edge uv ∈ E (G) where φ(u)  φ(v) is embedded as the union of a (φ (uv ),0) ( f ) on S (μ,0)

and on S (ν,0) , where φ(uv) = ν μ, and f corresponds to uv as described in the definition of F . This
completes the proof of the “only if” part.
For the converse, assume that we are given an atomic embedding of G on H . Clearly, the previous construction can be reversed to construct a subfamily of compatible spherical embeddings
). By taking the mirror image of this construction,
E (μ,0) of the links L (μ,0) (P ), for all (μ, 0) ∈ V (H
). The union of E (μ,0) and E (μ,1) , for all μ ∈ V (H ), gives the
we obtain E (μ,1) , for all (μ, 1) ∈ V (H
desired family of compatible spherical embeddings. By Theorem 3, P (φ) is thickenable.

An immediate consequence of Lemma 22 is the main result of this section.
Theorem 4. Atomic Embeddability reduces to thickenability in polynomial time.
Simultaneous embedding with fixed edges (SEFE-2). In the following we discuss an implication of
Theorem 4 to the problem of simultaneous embeddability of two graphs sefe-2, which is formally
described as follows.
Problem 5 (Sefe-2.). Given two (planar) graphs, G 1 = (V , E 1 ) and G 2 = (V , E 2 ), decide whether
there exists a planar embedding E of G = G 1 ∪ G 2 such that both E[G 1 ] and E[G 2 ] are embeddings.
The Connected sefe-2 is a special case of sefe-2 in which G 1 ∩ G 2 is connected. Angelini
and Da Lozzo [4] showed that connected sefe-2 is polynomial-time equivalent to c-planarity.
Since c-planarity is a special case of Atomic Embeddability, together with Theorem 4, this
immediately implies the following.
Corollary 5. Connected sefe-2 reduces in polynomial time to thickenability.
ACKNOWLEDGMENT
The first author would like to thank Arnaud de Mesmay for pointing him to Johannes Carmesin’s
work. Thanks are extended to Johannes Carmesin for kindly discussing this work with him, and
to Jan Kynčl for a careful reading of the manuscript.